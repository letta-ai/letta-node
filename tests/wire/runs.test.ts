/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";

describe("Runs", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                status: "created",
                completed_at: "2024-01-15T09:30:00Z",
                metadata: { key: "value" },
                job_type: "job",
                callback_url: "callback_url",
                callback_sent_at: "2024-01-15T09:30:00Z",
                callback_status_code: 1,
                callback_error: "callback_error",
                id: "run-123e4567-e89b-12d3-a456-426614174000",
                request_config: {
                    use_assistant_message: true,
                    assistant_message_tool_name: "assistant_message_tool_name",
                    assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                    include_return_message_types: ["system_message"],
                },
            },
        ];
        server.mockEndpoint().get("/v1/runs/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.runs.list();
        expect(response).toEqual([
            {
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                status: "created",
                completed_at: "2024-01-15T09:30:00Z",
                metadata: {
                    key: "value",
                },
                job_type: "job",
                callback_url: "callback_url",
                callback_sent_at: "2024-01-15T09:30:00Z",
                callback_status_code: 1,
                callback_error: "callback_error",
                id: "run-123e4567-e89b-12d3-a456-426614174000",
                request_config: {
                    use_assistant_message: true,
                    assistant_message_tool_name: "assistant_message_tool_name",
                    assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                    include_return_message_types: ["system_message"],
                },
            },
        ]);
    });

    test("list_active", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                status: "created",
                completed_at: "2024-01-15T09:30:00Z",
                metadata: { key: "value" },
                job_type: "job",
                callback_url: "callback_url",
                callback_sent_at: "2024-01-15T09:30:00Z",
                callback_status_code: 1,
                callback_error: "callback_error",
                id: "run-123e4567-e89b-12d3-a456-426614174000",
                request_config: {
                    use_assistant_message: true,
                    assistant_message_tool_name: "assistant_message_tool_name",
                    assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                    include_return_message_types: ["system_message"],
                },
            },
        ];
        server.mockEndpoint().get("/v1/runs/active").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.runs.listActive();
        expect(response).toEqual([
            {
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                status: "created",
                completed_at: "2024-01-15T09:30:00Z",
                metadata: {
                    key: "value",
                },
                job_type: "job",
                callback_url: "callback_url",
                callback_sent_at: "2024-01-15T09:30:00Z",
                callback_status_code: 1,
                callback_error: "callback_error",
                id: "run-123e4567-e89b-12d3-a456-426614174000",
                request_config: {
                    use_assistant_message: true,
                    assistant_message_tool_name: "assistant_message_tool_name",
                    assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                    include_return_message_types: ["system_message"],
                },
            },
        ]);
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            status: "created",
            completed_at: "2024-01-15T09:30:00Z",
            metadata: { key: "value" },
            job_type: "job",
            callback_url: "callback_url",
            callback_sent_at: "2024-01-15T09:30:00Z",
            callback_status_code: 1,
            callback_error: "callback_error",
            id: "run-123e4567-e89b-12d3-a456-426614174000",
            request_config: {
                use_assistant_message: true,
                assistant_message_tool_name: "assistant_message_tool_name",
                assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                include_return_message_types: ["system_message"],
            },
        };
        server.mockEndpoint().get("/v1/runs/run_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.runs.retrieve("run_id");
        expect(response).toEqual({
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            status: "created",
            completed_at: "2024-01-15T09:30:00Z",
            metadata: {
                key: "value",
            },
            job_type: "job",
            callback_url: "callback_url",
            callback_sent_at: "2024-01-15T09:30:00Z",
            callback_status_code: 1,
            callback_error: "callback_error",
            id: "run-123e4567-e89b-12d3-a456-426614174000",
            request_config: {
                use_assistant_message: true,
                assistant_message_tool_name: "assistant_message_tool_name",
                assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                include_return_message_types: ["system_message"],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            status: "created",
            completed_at: "2024-01-15T09:30:00Z",
            metadata: { key: "value" },
            job_type: "job",
            callback_url: "callback_url",
            callback_sent_at: "2024-01-15T09:30:00Z",
            callback_status_code: 1,
            callback_error: "callback_error",
            id: "run-123e4567-e89b-12d3-a456-426614174000",
            request_config: {
                use_assistant_message: true,
                assistant_message_tool_name: "assistant_message_tool_name",
                assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                include_return_message_types: ["system_message"],
            },
        };
        server.mockEndpoint().delete("/v1/runs/run_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.runs.delete("run_id");
        expect(response).toEqual({
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            status: "created",
            completed_at: "2024-01-15T09:30:00Z",
            metadata: {
                key: "value",
            },
            job_type: "job",
            callback_url: "callback_url",
            callback_sent_at: "2024-01-15T09:30:00Z",
            callback_status_code: 1,
            callback_error: "callback_error",
            id: "run-123e4567-e89b-12d3-a456-426614174000",
            request_config: {
                use_assistant_message: true,
                assistant_message_tool_name: "assistant_message_tool_name",
                assistant_message_tool_kwarg: "assistant_message_tool_kwarg",
                include_return_message_types: ["system_message"],
            },
        });
    });
});
