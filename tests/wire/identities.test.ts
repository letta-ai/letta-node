/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";

describe("Identities", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "identity-123e4567-e89b-12d3-a456-426614174000",
                identifier_key: "identifier_key",
                name: "name",
                identity_type: "org",
                project_id: "project_id",
                agent_ids: ["agent_ids"],
                block_ids: ["block_ids"],
                properties: [{ key: "key", value: "value", type: "string" }],
            },
        ];
        server.mockEndpoint().get("/v1/identities/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.identities.list();
        expect(response).toEqual([
            {
                id: "identity-123e4567-e89b-12d3-a456-426614174000",
                identifier_key: "identifier_key",
                name: "name",
                identity_type: "org",
                project_id: "project_id",
                agent_ids: ["agent_ids"],
                block_ids: ["block_ids"],
                properties: [
                    {
                        key: "key",
                        value: "value",
                        type: "string",
                    },
                ],
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { identifier_key: "identifier_key", name: "name", identity_type: "org" };
        const rawResponseBody = {
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [{ key: "key", value: "value", type: "string" }],
        };
        server
            .mockEndpoint()
            .post("/v1/identities/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identities.create({
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
        });
        expect(response).toEqual({
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [
                {
                    key: "key",
                    value: "value",
                    type: "string",
                },
            ],
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { identifier_key: "identifier_key", name: "name", identity_type: "org" };
        const rawResponseBody = {
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [{ key: "key", value: "value", type: "string" }],
        };
        server
            .mockEndpoint()
            .put("/v1/identities/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identities.upsert({
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
        });
        expect(response).toEqual({
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [
                {
                    key: "key",
                    value: "value",
                    type: "string",
                },
            ],
        });
    });

    test("count", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = 1;
        server
            .mockEndpoint()
            .get("/v1/identities/count")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identities.count();
        expect(response).toEqual(1);
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [{ key: "key", value: "value", type: "string" }],
        };
        server
            .mockEndpoint()
            .get("/v1/identities/identity_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identities.retrieve("identity_id");
        expect(response).toEqual({
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [
                {
                    key: "key",
                    value: "value",
                    type: "string",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/identities/identity_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identities.delete("identity_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [{ key: "key", value: "value", type: "string" }],
        };
        server
            .mockEndpoint()
            .patch("/v1/identities/identity_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.identities.modify("identity_id");
        expect(response).toEqual({
            id: "identity-123e4567-e89b-12d3-a456-426614174000",
            identifier_key: "identifier_key",
            name: "name",
            identity_type: "org",
            project_id: "project_id",
            agent_ids: ["agent_ids"],
            block_ids: ["block_ids"],
            properties: [
                {
                    key: "key",
                    value: "value",
                    type: "string",
                },
            ],
        });
    });
});
