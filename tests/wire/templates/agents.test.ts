/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";

describe("Agents", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            agents: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    name: "name",
                    tool_rules: [
                        { tool_name: "tool_name", type: "conditional", child_output_mapping: { key: "value" } },
                    ],
                    message_ids: ["message_ids"],
                    system: "system",
                    agent_type: "memgpt_agent",
                    llm_config: { model: "model", model_endpoint_type: "openai", context_window: 1 },
                    embedding_config: {
                        embedding_endpoint_type: "openai",
                        embedding_model: "embedding_model",
                        embedding_dim: 1,
                    },
                    response_format: { type: "json_object" },
                    description: "description",
                    metadata: { key: "value" },
                    memory: { blocks: [{ value: "value", id: "block-123e4567-e89b-12d3-a456-426614174000" }] },
                    tools: [{ id: "tool-123e4567-e89b-12d3-a456-426614174000" }],
                    sources: [
                        {
                            name: "name",
                            id: "source-123e4567-e89b-12d3-a456-426614174000",
                            embedding_config: {
                                embedding_endpoint_type: "openai",
                                embedding_model: "embedding_model",
                                embedding_dim: 1,
                            },
                        },
                    ],
                    tags: ["tags"],
                    tool_exec_environment_variables: [
                        {
                            id: "agent-env-123e4567-e89b-12d3-a456-426614174000",
                            key: "key",
                            value: "value",
                            agent_id: "agent_id",
                        },
                    ],
                    project_id: "project_id",
                    template_id: "template_id",
                    base_template_id: "base_template_id",
                    identity_ids: ["identity_ids"],
                    message_buffer_autoclear: true,
                    enable_sleeptime: true,
                    multi_agent_group: {
                        id: "id",
                        manager_type: "round_robin",
                        agent_ids: ["agent_ids"],
                        description: "description",
                    },
                    last_run_completion: "2024-01-15T09:30:00Z",
                    last_run_duration_ms: 1,
                    timezone: "timezone",
                    max_files_open: 1,
                    per_file_view_window_char_limit: 1,
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/v1/templates/project/template_version/agents")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.templates.agents.create("project", "template_version");
        expect(response).toEqual({
            agents: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "id",
                    name: "name",
                    tool_rules: [
                        {
                            tool_name: "tool_name",
                            type: "conditional",
                            child_output_mapping: {
                                key: "value",
                            },
                        },
                    ],
                    message_ids: ["message_ids"],
                    system: "system",
                    agent_type: "memgpt_agent",
                    llm_config: {
                        model: "model",
                        model_endpoint_type: "openai",
                        context_window: 1,
                    },
                    embedding_config: {
                        embedding_endpoint_type: "openai",
                        embedding_model: "embedding_model",
                        embedding_dim: 1,
                    },
                    response_format: {
                        type: "json_object",
                    },
                    description: "description",
                    metadata: {
                        key: "value",
                    },
                    memory: {
                        blocks: [
                            {
                                value: "value",
                                id: "block-123e4567-e89b-12d3-a456-426614174000",
                            },
                        ],
                    },
                    tools: [
                        {
                            id: "tool-123e4567-e89b-12d3-a456-426614174000",
                        },
                    ],
                    sources: [
                        {
                            name: "name",
                            id: "source-123e4567-e89b-12d3-a456-426614174000",
                            embedding_config: {
                                embedding_endpoint_type: "openai",
                                embedding_model: "embedding_model",
                                embedding_dim: 1,
                            },
                        },
                    ],
                    tags: ["tags"],
                    tool_exec_environment_variables: [
                        {
                            id: "agent-env-123e4567-e89b-12d3-a456-426614174000",
                            key: "key",
                            value: "value",
                            agent_id: "agent_id",
                        },
                    ],
                    project_id: "project_id",
                    template_id: "template_id",
                    base_template_id: "base_template_id",
                    identity_ids: ["identity_ids"],
                    message_buffer_autoclear: true,
                    enable_sleeptime: true,
                    multi_agent_group: {
                        id: "id",
                        manager_type: "round_robin",
                        agent_ids: ["agent_ids"],
                        description: "description",
                    },
                    last_run_completion: "2024-01-15T09:30:00Z",
                    last_run_duration_ms: 1,
                    timezone: "timezone",
                    max_files_open: 1,
                    per_file_view_window_char_limit: 1,
                },
            ],
        });
    });
});
