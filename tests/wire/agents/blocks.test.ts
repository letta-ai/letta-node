/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";
import * as Letta from "../../../src/api/index";

describe("Blocks", () => {
    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: { key: "value" },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        };
        server
            .mockEndpoint()
            .get("/v1/agents/agent_id/core-memory/blocks/block_label")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.blocks.retrieve("agent_id", "block_label");
        expect(response).toEqual({
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: {
                key: "value",
            },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: { key: "value" },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        };
        server
            .mockEndpoint()
            .patch("/v1/agents/agent_id/core-memory/blocks/block_label")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.blocks.modify("agent_id", "block_label", {});
        expect(response).toEqual({
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: {
                key: "value",
            },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        });
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                value: "value",
                limit: 1,
                project_id: "project_id",
                name: "name",
                is_template: true,
                preserve_on_migration: true,
                label: "label",
                read_only: true,
                description: "description",
                metadata: { key: "value" },
                id: "block-123e4567-e89b-12d3-a456-426614174000",
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/agents/agent_id/core-memory/blocks")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.blocks.list("agent_id");
        expect(response).toEqual([
            {
                value: "value",
                limit: 1,
                project_id: "project_id",
                name: "name",
                is_template: true,
                preserve_on_migration: true,
                label: "label",
                read_only: true,
                description: "description",
                metadata: {
                    key: "value",
                },
                id: "block-123e4567-e89b-12d3-a456-426614174000",
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
            },
        ]);
    });

    test("attach", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            id: "id",
            name: "name",
            tool_rules: [
                {
                    tool_name: "tool_name",
                    type: "conditional",
                    prompt_template: "prompt_template",
                    default_child: "default_child",
                    child_output_mapping: { key: "value" },
                    require_output_mapping: true,
                },
            ],
            message_ids: ["message_ids"],
            system: "system",
            agent_type: "memgpt_agent",
            llm_config: {
                model: "model",
                model_endpoint_type: "openai",
                model_endpoint: "model_endpoint",
                provider_name: "provider_name",
                provider_category: "base",
                model_wrapper: "model_wrapper",
                context_window: 1,
                put_inner_thoughts_in_kwargs: true,
                handle: "handle",
                temperature: 1.1,
                max_tokens: 1,
                enable_reasoner: true,
                reasoning_effort: "low",
                max_reasoning_tokens: 1,
                frequency_penalty: 1.1,
                compatibility_type: "gguf",
            },
            embedding_config: {
                embedding_endpoint_type: "openai",
                embedding_endpoint: "embedding_endpoint",
                embedding_model: "embedding_model",
                embedding_dim: 1,
                embedding_chunk_size: 1,
                handle: "handle",
                batch_size: 1,
                azure_endpoint: "azure_endpoint",
                azure_version: "azure_version",
                azure_deployment: "azure_deployment",
            },
            response_format: { type: "json_object" },
            description: "description",
            metadata: { key: "value" },
            memory: {
                blocks: [{ value: "value", id: "block-123e4567-e89b-12d3-a456-426614174000" }],
                file_blocks: [
                    {
                        value: "value",
                        id: "block-123e4567-e89b-12d3-a456-426614174000",
                        file_id: "file_id",
                        source_id: "source_id",
                        is_open: true,
                    },
                ],
                prompt_template: "prompt_template",
            },
            tools: [
                {
                    id: "tool-123e4567-e89b-12d3-a456-426614174000",
                    tool_type: "custom",
                    description: "description",
                    source_type: "source_type",
                    name: "name",
                    tags: ["tags"],
                    source_code: "source_code",
                    json_schema: { key: "value" },
                    args_json_schema: { key: "value" },
                    return_char_limit: 1,
                    pip_requirements: [{ name: "name" }],
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    metadata_: { key: "value" },
                },
            ],
            sources: [
                {
                    name: "name",
                    description: "description",
                    instructions: "instructions",
                    metadata: { key: "value" },
                    id: "source-123e4567-e89b-12d3-a456-426614174000",
                    embedding_config: {
                        embedding_endpoint_type: "openai",
                        embedding_model: "embedding_model",
                        embedding_dim: 1,
                    },
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            tags: ["tags"],
            tool_exec_environment_variables: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "agent-env-123e4567-e89b-12d3-a456-426614174000",
                    key: "key",
                    value: "value",
                    description: "description",
                    agent_id: "agent_id",
                },
            ],
            project_id: "project_id",
            template_id: "template_id",
            base_template_id: "base_template_id",
            identity_ids: ["identity_ids"],
            message_buffer_autoclear: true,
            enable_sleeptime: true,
            multi_agent_group: {
                id: "id",
                manager_type: "round_robin",
                agent_ids: ["agent_ids"],
                description: "description",
                project_id: "project_id",
                shared_block_ids: ["shared_block_ids"],
                manager_agent_id: "manager_agent_id",
                termination_token: "termination_token",
                max_turns: 1,
                sleeptime_agent_frequency: 1,
                turns_counter: 1,
                last_processed_message_id: "last_processed_message_id",
                max_message_buffer_length: 1,
                min_message_buffer_length: 1,
            },
            last_run_completion: "2024-01-15T09:30:00Z",
            last_run_duration_ms: 1,
            timezone: "timezone",
            max_files_open: 1,
            per_file_view_window_char_limit: 1,
        };
        server
            .mockEndpoint()
            .patch("/v1/agents/agent_id/core-memory/blocks/attach/block_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.blocks.attach("agent_id", "block_id");
        expect(response).toEqual({
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            id: "id",
            name: "name",
            tool_rules: [
                {
                    tool_name: "tool_name",
                    type: "conditional",
                    prompt_template: "prompt_template",
                    default_child: "default_child",
                    child_output_mapping: {
                        key: "value",
                    },
                    require_output_mapping: true,
                },
            ],
            message_ids: ["message_ids"],
            system: "system",
            agent_type: "memgpt_agent",
            llm_config: {
                model: "model",
                model_endpoint_type: "openai",
                model_endpoint: "model_endpoint",
                provider_name: "provider_name",
                provider_category: "base",
                model_wrapper: "model_wrapper",
                context_window: 1,
                put_inner_thoughts_in_kwargs: true,
                handle: "handle",
                temperature: 1.1,
                max_tokens: 1,
                enable_reasoner: true,
                reasoning_effort: "low",
                max_reasoning_tokens: 1,
                frequency_penalty: 1.1,
                compatibility_type: "gguf",
            },
            embedding_config: {
                embedding_endpoint_type: "openai",
                embedding_endpoint: "embedding_endpoint",
                embedding_model: "embedding_model",
                embedding_dim: 1,
                embedding_chunk_size: 1,
                handle: "handle",
                batch_size: 1,
                azure_endpoint: "azure_endpoint",
                azure_version: "azure_version",
                azure_deployment: "azure_deployment",
            },
            response_format: {
                type: "json_object",
            },
            description: "description",
            metadata: {
                key: "value",
            },
            memory: {
                blocks: [
                    {
                        value: "value",
                        id: "block-123e4567-e89b-12d3-a456-426614174000",
                    },
                ],
                file_blocks: [
                    {
                        value: "value",
                        id: "block-123e4567-e89b-12d3-a456-426614174000",
                        file_id: "file_id",
                        source_id: "source_id",
                        is_open: true,
                    },
                ],
                prompt_template: "prompt_template",
            },
            tools: [
                {
                    id: "tool-123e4567-e89b-12d3-a456-426614174000",
                    tool_type: "custom",
                    description: "description",
                    source_type: "source_type",
                    name: "name",
                    tags: ["tags"],
                    source_code: "source_code",
                    json_schema: {
                        key: "value",
                    },
                    args_json_schema: {
                        key: "value",
                    },
                    return_char_limit: 1,
                    pip_requirements: [
                        {
                            name: "name",
                        },
                    ],
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    metadata_: {
                        key: "value",
                    },
                },
            ],
            sources: [
                {
                    name: "name",
                    description: "description",
                    instructions: "instructions",
                    metadata: {
                        key: "value",
                    },
                    id: "source-123e4567-e89b-12d3-a456-426614174000",
                    embedding_config: {
                        embedding_endpoint_type: "openai",
                        embedding_model: "embedding_model",
                        embedding_dim: 1,
                    },
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            tags: ["tags"],
            tool_exec_environment_variables: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "agent-env-123e4567-e89b-12d3-a456-426614174000",
                    key: "key",
                    value: "value",
                    description: "description",
                    agent_id: "agent_id",
                },
            ],
            project_id: "project_id",
            template_id: "template_id",
            base_template_id: "base_template_id",
            identity_ids: ["identity_ids"],
            message_buffer_autoclear: true,
            enable_sleeptime: true,
            multi_agent_group: {
                id: "id",
                manager_type: "round_robin",
                agent_ids: ["agent_ids"],
                description: "description",
                project_id: "project_id",
                shared_block_ids: ["shared_block_ids"],
                manager_agent_id: "manager_agent_id",
                termination_token: "termination_token",
                max_turns: 1,
                sleeptime_agent_frequency: 1,
                turns_counter: 1,
                last_processed_message_id: "last_processed_message_id",
                max_message_buffer_length: 1,
                min_message_buffer_length: 1,
            },
            last_run_completion: "2024-01-15T09:30:00Z",
            last_run_duration_ms: 1,
            timezone: "timezone",
            max_files_open: 1,
            per_file_view_window_char_limit: 1,
        });
    });

    test("detach", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            id: "id",
            name: "name",
            tool_rules: [
                {
                    tool_name: "tool_name",
                    type: "conditional",
                    prompt_template: "prompt_template",
                    default_child: "default_child",
                    child_output_mapping: { key: "value" },
                    require_output_mapping: true,
                },
            ],
            message_ids: ["message_ids"],
            system: "system",
            agent_type: "memgpt_agent",
            llm_config: {
                model: "model",
                model_endpoint_type: "openai",
                model_endpoint: "model_endpoint",
                provider_name: "provider_name",
                provider_category: "base",
                model_wrapper: "model_wrapper",
                context_window: 1,
                put_inner_thoughts_in_kwargs: true,
                handle: "handle",
                temperature: 1.1,
                max_tokens: 1,
                enable_reasoner: true,
                reasoning_effort: "low",
                max_reasoning_tokens: 1,
                frequency_penalty: 1.1,
                compatibility_type: "gguf",
            },
            embedding_config: {
                embedding_endpoint_type: "openai",
                embedding_endpoint: "embedding_endpoint",
                embedding_model: "embedding_model",
                embedding_dim: 1,
                embedding_chunk_size: 1,
                handle: "handle",
                batch_size: 1,
                azure_endpoint: "azure_endpoint",
                azure_version: "azure_version",
                azure_deployment: "azure_deployment",
            },
            response_format: { type: "json_object" },
            description: "description",
            metadata: { key: "value" },
            memory: {
                blocks: [{ value: "value", id: "block-123e4567-e89b-12d3-a456-426614174000" }],
                file_blocks: [
                    {
                        value: "value",
                        id: "block-123e4567-e89b-12d3-a456-426614174000",
                        file_id: "file_id",
                        source_id: "source_id",
                        is_open: true,
                    },
                ],
                prompt_template: "prompt_template",
            },
            tools: [
                {
                    id: "tool-123e4567-e89b-12d3-a456-426614174000",
                    tool_type: "custom",
                    description: "description",
                    source_type: "source_type",
                    name: "name",
                    tags: ["tags"],
                    source_code: "source_code",
                    json_schema: { key: "value" },
                    args_json_schema: { key: "value" },
                    return_char_limit: 1,
                    pip_requirements: [{ name: "name" }],
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    metadata_: { key: "value" },
                },
            ],
            sources: [
                {
                    name: "name",
                    description: "description",
                    instructions: "instructions",
                    metadata: { key: "value" },
                    id: "source-123e4567-e89b-12d3-a456-426614174000",
                    embedding_config: {
                        embedding_endpoint_type: "openai",
                        embedding_model: "embedding_model",
                        embedding_dim: 1,
                    },
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            tags: ["tags"],
            tool_exec_environment_variables: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "agent-env-123e4567-e89b-12d3-a456-426614174000",
                    key: "key",
                    value: "value",
                    description: "description",
                    agent_id: "agent_id",
                },
            ],
            project_id: "project_id",
            template_id: "template_id",
            base_template_id: "base_template_id",
            identity_ids: ["identity_ids"],
            message_buffer_autoclear: true,
            enable_sleeptime: true,
            multi_agent_group: {
                id: "id",
                manager_type: "round_robin",
                agent_ids: ["agent_ids"],
                description: "description",
                project_id: "project_id",
                shared_block_ids: ["shared_block_ids"],
                manager_agent_id: "manager_agent_id",
                termination_token: "termination_token",
                max_turns: 1,
                sleeptime_agent_frequency: 1,
                turns_counter: 1,
                last_processed_message_id: "last_processed_message_id",
                max_message_buffer_length: 1,
                min_message_buffer_length: 1,
            },
            last_run_completion: "2024-01-15T09:30:00Z",
            last_run_duration_ms: 1,
            timezone: "timezone",
            max_files_open: 1,
            per_file_view_window_char_limit: 1,
        };
        server
            .mockEndpoint()
            .patch("/v1/agents/agent_id/core-memory/blocks/detach/block_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.blocks.detach("agent_id", "block_id");
        expect(response).toEqual({
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            id: "id",
            name: "name",
            tool_rules: [
                {
                    tool_name: "tool_name",
                    type: "conditional",
                    prompt_template: "prompt_template",
                    default_child: "default_child",
                    child_output_mapping: {
                        key: "value",
                    },
                    require_output_mapping: true,
                },
            ],
            message_ids: ["message_ids"],
            system: "system",
            agent_type: "memgpt_agent",
            llm_config: {
                model: "model",
                model_endpoint_type: "openai",
                model_endpoint: "model_endpoint",
                provider_name: "provider_name",
                provider_category: "base",
                model_wrapper: "model_wrapper",
                context_window: 1,
                put_inner_thoughts_in_kwargs: true,
                handle: "handle",
                temperature: 1.1,
                max_tokens: 1,
                enable_reasoner: true,
                reasoning_effort: "low",
                max_reasoning_tokens: 1,
                frequency_penalty: 1.1,
                compatibility_type: "gguf",
            },
            embedding_config: {
                embedding_endpoint_type: "openai",
                embedding_endpoint: "embedding_endpoint",
                embedding_model: "embedding_model",
                embedding_dim: 1,
                embedding_chunk_size: 1,
                handle: "handle",
                batch_size: 1,
                azure_endpoint: "azure_endpoint",
                azure_version: "azure_version",
                azure_deployment: "azure_deployment",
            },
            response_format: {
                type: "json_object",
            },
            description: "description",
            metadata: {
                key: "value",
            },
            memory: {
                blocks: [
                    {
                        value: "value",
                        id: "block-123e4567-e89b-12d3-a456-426614174000",
                    },
                ],
                file_blocks: [
                    {
                        value: "value",
                        id: "block-123e4567-e89b-12d3-a456-426614174000",
                        file_id: "file_id",
                        source_id: "source_id",
                        is_open: true,
                    },
                ],
                prompt_template: "prompt_template",
            },
            tools: [
                {
                    id: "tool-123e4567-e89b-12d3-a456-426614174000",
                    tool_type: "custom",
                    description: "description",
                    source_type: "source_type",
                    name: "name",
                    tags: ["tags"],
                    source_code: "source_code",
                    json_schema: {
                        key: "value",
                    },
                    args_json_schema: {
                        key: "value",
                    },
                    return_char_limit: 1,
                    pip_requirements: [
                        {
                            name: "name",
                        },
                    ],
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    metadata_: {
                        key: "value",
                    },
                },
            ],
            sources: [
                {
                    name: "name",
                    description: "description",
                    instructions: "instructions",
                    metadata: {
                        key: "value",
                    },
                    id: "source-123e4567-e89b-12d3-a456-426614174000",
                    embedding_config: {
                        embedding_endpoint_type: "openai",
                        embedding_model: "embedding_model",
                        embedding_dim: 1,
                    },
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            tags: ["tags"],
            tool_exec_environment_variables: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "agent-env-123e4567-e89b-12d3-a456-426614174000",
                    key: "key",
                    value: "value",
                    description: "description",
                    agent_id: "agent_id",
                },
            ],
            project_id: "project_id",
            template_id: "template_id",
            base_template_id: "base_template_id",
            identity_ids: ["identity_ids"],
            message_buffer_autoclear: true,
            enable_sleeptime: true,
            multi_agent_group: {
                id: "id",
                manager_type: "round_robin",
                agent_ids: ["agent_ids"],
                description: "description",
                project_id: "project_id",
                shared_block_ids: ["shared_block_ids"],
                manager_agent_id: "manager_agent_id",
                termination_token: "termination_token",
                max_turns: 1,
                sleeptime_agent_frequency: 1,
                turns_counter: 1,
                last_processed_message_id: "last_processed_message_id",
                max_message_buffer_length: 1,
                min_message_buffer_length: 1,
            },
            last_run_completion: "2024-01-15T09:30:00Z",
            last_run_duration_ms: 1,
            timezone: "timezone",
            max_files_open: 1,
            per_file_view_window_char_limit: 1,
        });
    });
});
