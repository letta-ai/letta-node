/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";

describe("Context", () => {
    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            context_window_size_max: 1,
            context_window_size_current: 1,
            num_messages: 1,
            num_archival_memory: 1,
            num_recall_memory: 1,
            num_tokens_external_memory_summary: 1,
            external_memory_summary: "external_memory_summary",
            num_tokens_system: 1,
            system_prompt: "system_prompt",
            num_tokens_core_memory: 1,
            core_memory: "core_memory",
            num_tokens_summary_memory: 1,
            summary_memory: "summary_memory",
            num_tokens_functions_definitions: 1,
            functions_definitions: [{ function: { name: "name" }, type: "function" }],
            num_tokens_messages: 1,
            messages: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "message-123e4567-e89b-12d3-a456-426614174000",
                    agent_id: "agent_id",
                    model: "model",
                    role: "assistant",
                    content: [{ type: "image", source: { type: "base64", media_type: "media_type", data: "data" } }],
                    name: "name",
                    tool_calls: [{ id: "id", function: { arguments: "arguments", name: "name" }, type: "function" }],
                    tool_call_id: "tool_call_id",
                    step_id: "step_id",
                    otid: "otid",
                    tool_returns: [{ status: "success" }],
                    group_id: "group_id",
                    sender_id: "sender_id",
                    batch_item_id: "batch_item_id",
                    is_err: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/v1/agents/agent_id/context")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.context.retrieve("agent_id");
        expect(response).toEqual({
            context_window_size_max: 1,
            context_window_size_current: 1,
            num_messages: 1,
            num_archival_memory: 1,
            num_recall_memory: 1,
            num_tokens_external_memory_summary: 1,
            external_memory_summary: "external_memory_summary",
            num_tokens_system: 1,
            system_prompt: "system_prompt",
            num_tokens_core_memory: 1,
            core_memory: "core_memory",
            num_tokens_summary_memory: 1,
            summary_memory: "summary_memory",
            num_tokens_functions_definitions: 1,
            functions_definitions: [
                {
                    function: {
                        name: "name",
                    },
                    type: "function",
                },
            ],
            num_tokens_messages: 1,
            messages: [
                {
                    created_by_id: "created_by_id",
                    last_updated_by_id: "last_updated_by_id",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    id: "message-123e4567-e89b-12d3-a456-426614174000",
                    agent_id: "agent_id",
                    model: "model",
                    role: "assistant",
                    content: [
                        {
                            type: "image",
                            source: {
                                type: "base64",
                                media_type: "media_type",
                                data: "data",
                            },
                        },
                    ],
                    name: "name",
                    tool_calls: [
                        {
                            id: "id",
                            function: {
                                arguments: "arguments",
                                name: "name",
                            },
                            type: "function",
                        },
                    ],
                    tool_call_id: "tool_call_id",
                    step_id: "step_id",
                    otid: "otid",
                    tool_returns: [
                        {
                            status: "success",
                        },
                    ],
                    group_id: "group_id",
                    sender_id: "sender_id",
                    batch_item_id: "batch_item_id",
                    is_err: true,
                },
            ],
        });
    });
});
