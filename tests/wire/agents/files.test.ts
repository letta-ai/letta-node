/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";

describe("Files", () => {
    test("close_all", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = ["string"];
        server
            .mockEndpoint()
            .patch("/v1/agents/agent_id/files/close-all")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.files.closeAll("agent_id");
        expect(response).toEqual(["string"]);
    });

    test("open", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = ["string"];
        server
            .mockEndpoint()
            .patch("/v1/agents/agent_id/files/file_id/open")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.files.open("agent_id", "file_id");
        expect(response).toEqual(["string"]);
    });

    test("close", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/v1/agents/agent_id/files/file_id/close")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.files.close("agent_id", "file_id");
        expect(response).toEqual({
            key: "value",
        });
    });
});
