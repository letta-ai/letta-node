/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";

describe("Templates", () => {
    test("create_version", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};

        server
            .mockEndpoint()
            .post("/v1/agents/agent_id/version-template")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.agents.templates.createVersion("agent_id");
        expect(response).toEqual(undefined);
    });

    test("migrate", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { to_template: "to_template", preserve_core_memories: true };
        const rawResponseBody = { success: true };
        server
            .mockEndpoint()
            .post("/v1/agents/agent_id/migrate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.templates.migrate("agent_id", {
            to_template: "to_template",
            preserve_core_memories: true,
        });
        expect(response).toEqual({
            success: true,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { templateName: "templateName", templateId: "templateId" };
        server
            .mockEndpoint()
            .post("/v1/agents/agent_id/template")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.agents.templates.create("agent_id");
        expect(response).toEqual({
            templateName: "templateName",
            templateId: "templateId",
        });
    });
});
