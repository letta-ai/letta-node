/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";
import * as Letta from "../../src/api/index";

describe("Tools", () => {
    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: { key: "value" },
            args_json_schema: { key: "value" },
            return_char_limit: 1,
            pip_requirements: [{ name: "name", version: "version" }],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: { key: "value" },
        };
        server.mockEndpoint().get("/v1/tools/tool_id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.retrieve("tool_id");
        expect(response).toEqual({
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: {
                key: "value",
            },
            args_json_schema: {
                key: "value",
            },
            return_char_limit: 1,
            pip_requirements: [
                {
                    name: "name",
                    version: "version",
                },
            ],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: {
                key: "value",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/tools/tool_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.delete("tool_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: { key: "value" },
            args_json_schema: { key: "value" },
            return_char_limit: 1,
            pip_requirements: [{ name: "name", version: "version" }],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/v1/tools/tool_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.modify("tool_id");
        expect(response).toEqual({
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: {
                key: "value",
            },
            args_json_schema: {
                key: "value",
            },
            return_char_limit: 1,
            pip_requirements: [
                {
                    name: "name",
                    version: "version",
                },
            ],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: {
                key: "value",
            },
        });
    });

    test("count", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = 1;
        server.mockEndpoint().get("/v1/tools/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.count();
        expect(response).toEqual(1);
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "tool-123e4567-e89b-12d3-a456-426614174000",
                tool_type: "custom",
                description: "description",
                source_type: "source_type",
                name: "name",
                tags: ["tags"],
                source_code: "source_code",
                json_schema: { key: "value" },
                args_json_schema: { key: "value" },
                return_char_limit: 1,
                pip_requirements: [{ name: "name" }],
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                metadata_: { key: "value" },
            },
        ];
        server.mockEndpoint().get("/v1/tools/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.tools.list();
        expect(response).toEqual([
            {
                id: "tool-123e4567-e89b-12d3-a456-426614174000",
                tool_type: "custom",
                description: "description",
                source_type: "source_type",
                name: "name",
                tags: ["tags"],
                source_code: "source_code",
                json_schema: {
                    key: "value",
                },
                args_json_schema: {
                    key: "value",
                },
                return_char_limit: 1,
                pip_requirements: [
                    {
                        name: "name",
                    },
                ],
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                metadata_: {
                    key: "value",
                },
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { source_code: "source_code" };
        const rawResponseBody = {
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: { key: "value" },
            args_json_schema: { key: "value" },
            return_char_limit: 1,
            pip_requirements: [{ name: "name", version: "version" }],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/v1/tools/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.create({
            source_code: "source_code",
        });
        expect(response).toEqual({
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: {
                key: "value",
            },
            args_json_schema: {
                key: "value",
            },
            return_char_limit: 1,
            pip_requirements: [
                {
                    name: "name",
                    version: "version",
                },
            ],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: {
                key: "value",
            },
        });
    });

    test("upsert", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { source_code: "source_code" };
        const rawResponseBody = {
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: { key: "value" },
            args_json_schema: { key: "value" },
            return_char_limit: 1,
            pip_requirements: [{ name: "name", version: "version" }],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: { key: "value" },
        };
        server
            .mockEndpoint()
            .put("/v1/tools/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.upsert({
            source_code: "source_code",
        });
        expect(response).toEqual({
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: {
                key: "value",
            },
            args_json_schema: {
                key: "value",
            },
            return_char_limit: 1,
            pip_requirements: [
                {
                    name: "name",
                    version: "version",
                },
            ],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: {
                key: "value",
            },
        });
    });

    test("upsert_base_tools", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "tool-123e4567-e89b-12d3-a456-426614174000",
                tool_type: "custom",
                description: "description",
                source_type: "source_type",
                name: "name",
                tags: ["tags"],
                source_code: "source_code",
                json_schema: { key: "value" },
                args_json_schema: { key: "value" },
                return_char_limit: 1,
                pip_requirements: [{ name: "name" }],
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                metadata_: { key: "value" },
            },
        ];
        server
            .mockEndpoint()
            .post("/v1/tools/add-base-tools")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.upsertBaseTools();
        expect(response).toEqual([
            {
                id: "tool-123e4567-e89b-12d3-a456-426614174000",
                tool_type: "custom",
                description: "description",
                source_type: "source_type",
                name: "name",
                tags: ["tags"],
                source_code: "source_code",
                json_schema: {
                    key: "value",
                },
                args_json_schema: {
                    key: "value",
                },
                return_char_limit: 1,
                pip_requirements: [
                    {
                        name: "name",
                    },
                ],
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
                metadata_: {
                    key: "value",
                },
            },
        ]);
    });

    test("run_tool_from_source", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { source_code: "source_code", args: { key: "value" } };
        const rawResponseBody = {
            id: "id",
            date: "2024-01-15T09:30:00Z",
            name: "name",
            message_type: "tool_return_message",
            otid: "otid",
            sender_id: "sender_id",
            step_id: "step_id",
            is_err: true,
            tool_return: "tool_return",
            status: "success",
            tool_call_id: "tool_call_id",
            stdout: ["stdout"],
            stderr: ["stderr"],
        };
        server
            .mockEndpoint()
            .post("/v1/tools/run")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.runToolFromSource({
            source_code: "source_code",
            args: {
                key: "value",
            },
        });
        expect(response).toEqual({
            id: "id",
            date: "2024-01-15T09:30:00Z",
            name: "name",
            message_type: "tool_return_message",
            otid: "otid",
            sender_id: "sender_id",
            step_id: "step_id",
            is_err: true,
            tool_return: "tool_return",
            status: "success",
            tool_call_id: "tool_call_id",
            stdout: ["stdout"],
            stderr: ["stderr"],
        });
    });

    test("list_composio_apps", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "name",
                key: "key",
                appId: "appId",
                description: "description",
                categories: ["categories"],
                meta: { key: "value" },
                logo: "logo",
                docs: "docs",
                group: "group",
                status: "status",
                enabled: true,
                no_auth: true,
                auth_schemes: [
                    {
                        scheme_name: "scheme_name",
                        auth_mode: "OAUTH2",
                        fields: [{ name: "name", description: "description", type: "type" }],
                    },
                ],
                testConnectors: [{ key: "value" }],
                documentation_doc_text: "documentation_doc_text",
                configuration_docs_text: "configuration_docs_text",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/tools/composio/apps")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.listComposioApps();
        expect(response).toEqual([
            {
                name: "name",
                key: "key",
                appId: "appId",
                description: "description",
                categories: ["categories"],
                meta: {
                    key: "value",
                },
                logo: "logo",
                docs: "docs",
                group: "group",
                status: "status",
                enabled: true,
                no_auth: true,
                auth_schemes: [
                    {
                        scheme_name: "scheme_name",
                        auth_mode: "OAUTH2",
                        fields: [
                            {
                                name: "name",
                                description: "description",
                                type: "type",
                            },
                        ],
                    },
                ],
                testConnectors: [
                    {
                        key: "value",
                    },
                ],
                documentation_doc_text: "documentation_doc_text",
                configuration_docs_text: "configuration_docs_text",
            },
        ]);
    });

    test("list_composio_actions_by_app", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "name",
                description: "description",
                parameters: { properties: { key: "value" }, title: "title", type: "type", required: ["required"] },
                response: { properties: { key: "value" }, title: "title", type: "type", required: ["required"] },
                appName: "appName",
                appId: "appId",
                version: "version",
                available_versions: ["available_versions"],
                tags: ["tags"],
                logo: "logo",
                display_name: "display_name",
                enabled: true,
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/tools/composio/apps/composio_app_name/actions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.listComposioActionsByApp("composio_app_name");
        expect(response).toEqual([
            {
                name: "name",
                description: "description",
                parameters: {
                    properties: {
                        key: "value",
                    },
                    title: "title",
                    type: "type",
                    required: ["required"],
                },
                response: {
                    properties: {
                        key: "value",
                    },
                    title: "title",
                    type: "type",
                    required: ["required"],
                },
                appName: "appName",
                appId: "appId",
                version: "version",
                available_versions: ["available_versions"],
                tags: ["tags"],
                logo: "logo",
                display_name: "display_name",
                enabled: true,
            },
        ]);
    });

    test("add_composio_tool", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: { key: "value" },
            args_json_schema: { key: "value" },
            return_char_limit: 1,
            pip_requirements: [{ name: "name", version: "version" }],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/v1/tools/composio/composio_action_name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.addComposioTool("composio_action_name");
        expect(response).toEqual({
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: {
                key: "value",
            },
            args_json_schema: {
                key: "value",
            },
            return_char_limit: 1,
            pip_requirements: [
                {
                    name: "name",
                    version: "version",
                },
            ],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: {
                key: "value",
            },
        });
    });

    test("list_mcp_servers", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            key: {
                server_name: "server_name",
                type: "sse",
                server_url: "server_url",
                auth_header: "auth_header",
                auth_token: "auth_token",
                custom_headers: { key: "value" },
            },
        };
        server
            .mockEndpoint()
            .get("/v1/tools/mcp/servers")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.listMcpServers();
        expect(response).toEqual({
            key: {
                server_name: "server_name",
                type: "sse",
                server_url: "server_url",
                auth_header: "auth_header",
                auth_token: "auth_token",
                custom_headers: {
                    key: "value",
                },
            },
        });
    });

    test("add_mcp_server", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { server_name: "server_name", command: "command", args: ["args"] };
        const rawResponseBody = [
            { server_name: "server_name", type: "sse", command: "command", args: ["args"], env: { key: "value" } },
        ];
        server
            .mockEndpoint()
            .put("/v1/tools/mcp/servers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.addMcpServer({
            server_name: "server_name",
            command: "command",
            args: ["args"],
        });
        expect(response).toEqual([
            {
                server_name: "server_name",
                type: "sse",
                command: "command",
                args: ["args"],
                env: {
                    key: "value",
                },
            },
        ]);
    });

    test("list_mcp_tools_by_server", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                name: "name",
                title: "title",
                description: "description",
                inputSchema: { key: "value" },
                outputSchema: { key: "value" },
                annotations: {
                    title: "title",
                    readOnlyHint: true,
                    destructiveHint: true,
                    idempotentHint: true,
                    openWorldHint: true,
                },
                _meta: { key: "value" },
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/tools/mcp/servers/mcp_server_name/tools")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.listMcpToolsByServer("mcp_server_name");
        expect(response).toEqual([
            {
                name: "name",
                title: "title",
                description: "description",
                inputSchema: {
                    key: "value",
                },
                outputSchema: {
                    key: "value",
                },
                annotations: {
                    title: "title",
                    readOnlyHint: true,
                    destructiveHint: true,
                    idempotentHint: true,
                    openWorldHint: true,
                },
                _meta: {
                    key: "value",
                },
            },
        ]);
    });

    test("add_mcp_tool", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: { key: "value" },
            args_json_schema: { key: "value" },
            return_char_limit: 1,
            pip_requirements: [{ name: "name", version: "version" }],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/v1/tools/mcp/servers/mcp_server_name/mcp_tool_name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.addMcpTool("mcp_server_name", "mcp_tool_name");
        expect(response).toEqual({
            id: "tool-123e4567-e89b-12d3-a456-426614174000",
            tool_type: "custom",
            description: "description",
            source_type: "source_type",
            name: "name",
            tags: ["tags"],
            source_code: "source_code",
            json_schema: {
                key: "value",
            },
            args_json_schema: {
                key: "value",
            },
            return_char_limit: 1,
            pip_requirements: [
                {
                    name: "name",
                    version: "version",
                },
            ],
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
            metadata_: {
                key: "value",
            },
        });
    });

    test("delete_mcp_server", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            { server_name: "server_name", type: "sse", command: "command", args: ["args"], env: { key: "value" } },
        ];
        server
            .mockEndpoint()
            .delete("/v1/tools/mcp/servers/mcp_server_name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.deleteMcpServer("mcp_server_name");
        expect(response).toEqual([
            {
                server_name: "server_name",
                type: "sse",
                command: "command",
                args: ["args"],
                env: {
                    key: "value",
                },
            },
        ]);
    });

    test("update_mcp_server", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            server_name: "server_name",
            type: "sse",
            command: "command",
            args: ["args"],
            env: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/v1/tools/mcp/servers/mcp_server_name")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.updateMcpServer("mcp_server_name", {});
        expect(response).toEqual({
            server_name: "server_name",
            type: "sse",
            command: "command",
            args: ["args"],
            env: {
                key: "value",
            },
        });
    });

    test("test_mcp_server", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { server_name: "server_name", command: "command", args: ["args"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/v1/tools/mcp/servers/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tools.testMcpServer({
            server_name: "server_name",
            command: "command",
            args: ["args"],
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
