/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";

describe("Models", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                model: "model",
                model_endpoint_type: "openai",
                model_endpoint: "model_endpoint",
                provider_name: "provider_name",
                provider_category: "base",
                model_wrapper: "model_wrapper",
                context_window: 1,
                put_inner_thoughts_in_kwargs: true,
                handle: "handle",
                temperature: 1.1,
                max_tokens: 1,
                enable_reasoner: true,
                reasoning_effort: "low",
                max_reasoning_tokens: 1,
                frequency_penalty: 1.1,
                compatibility_type: "gguf",
            },
        ];
        server.mockEndpoint().get("/v1/models/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.models.list();
        expect(response).toEqual([
            {
                model: "model",
                model_endpoint_type: "openai",
                model_endpoint: "model_endpoint",
                provider_name: "provider_name",
                provider_category: "base",
                model_wrapper: "model_wrapper",
                context_window: 1,
                put_inner_thoughts_in_kwargs: true,
                handle: "handle",
                temperature: 1.1,
                max_tokens: 1,
                enable_reasoner: true,
                reasoning_effort: "low",
                max_reasoning_tokens: 1,
                frequency_penalty: 1.1,
                compatibility_type: "gguf",
            },
        ]);
    });
});
