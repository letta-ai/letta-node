/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";

describe("Groups", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                manager_type: "round_robin",
                agent_ids: ["agent_ids"],
                description: "description",
                project_id: "project_id",
                shared_block_ids: ["shared_block_ids"],
                manager_agent_id: "manager_agent_id",
                termination_token: "termination_token",
                max_turns: 1,
                sleeptime_agent_frequency: 1,
                turns_counter: 1,
                last_processed_message_id: "last_processed_message_id",
                max_message_buffer_length: 1,
                min_message_buffer_length: 1,
            },
        ];
        server.mockEndpoint().get("/v1/groups/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.groups.list();
        expect(response).toEqual([
            {
                id: "id",
                manager_type: "round_robin",
                agent_ids: ["agent_ids"],
                description: "description",
                project_id: "project_id",
                shared_block_ids: ["shared_block_ids"],
                manager_agent_id: "manager_agent_id",
                termination_token: "termination_token",
                max_turns: 1,
                sleeptime_agent_frequency: 1,
                turns_counter: 1,
                last_processed_message_id: "last_processed_message_id",
                max_message_buffer_length: 1,
                min_message_buffer_length: 1,
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { agent_ids: ["agent_ids"], description: "description" };
        const rawResponseBody = {
            id: "id",
            manager_type: "round_robin",
            agent_ids: ["agent_ids"],
            description: "description",
            project_id: "project_id",
            shared_block_ids: ["shared_block_ids"],
            manager_agent_id: "manager_agent_id",
            termination_token: "termination_token",
            max_turns: 1,
            sleeptime_agent_frequency: 1,
            turns_counter: 1,
            last_processed_message_id: "last_processed_message_id",
            max_message_buffer_length: 1,
            min_message_buffer_length: 1,
        };
        server
            .mockEndpoint()
            .post("/v1/groups/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.create({
            agent_ids: ["agent_ids"],
            description: "description",
        });
        expect(response).toEqual({
            id: "id",
            manager_type: "round_robin",
            agent_ids: ["agent_ids"],
            description: "description",
            project_id: "project_id",
            shared_block_ids: ["shared_block_ids"],
            manager_agent_id: "manager_agent_id",
            termination_token: "termination_token",
            max_turns: 1,
            sleeptime_agent_frequency: 1,
            turns_counter: 1,
            last_processed_message_id: "last_processed_message_id",
            max_message_buffer_length: 1,
            min_message_buffer_length: 1,
        });
    });

    test("count", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = 1;
        server.mockEndpoint().get("/v1/groups/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.groups.count();
        expect(response).toEqual(1);
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            manager_type: "round_robin",
            agent_ids: ["agent_ids"],
            description: "description",
            project_id: "project_id",
            shared_block_ids: ["shared_block_ids"],
            manager_agent_id: "manager_agent_id",
            termination_token: "termination_token",
            max_turns: 1,
            sleeptime_agent_frequency: 1,
            turns_counter: 1,
            last_processed_message_id: "last_processed_message_id",
            max_message_buffer_length: 1,
            min_message_buffer_length: 1,
        };
        server
            .mockEndpoint()
            .get("/v1/groups/group_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.retrieve("group_id");
        expect(response).toEqual({
            id: "id",
            manager_type: "round_robin",
            agent_ids: ["agent_ids"],
            description: "description",
            project_id: "project_id",
            shared_block_ids: ["shared_block_ids"],
            manager_agent_id: "manager_agent_id",
            termination_token: "termination_token",
            max_turns: 1,
            sleeptime_agent_frequency: 1,
            turns_counter: 1,
            last_processed_message_id: "last_processed_message_id",
            max_message_buffer_length: 1,
            min_message_buffer_length: 1,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/groups/group_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.delete("group_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            manager_type: "round_robin",
            agent_ids: ["agent_ids"],
            description: "description",
            project_id: "project_id",
            shared_block_ids: ["shared_block_ids"],
            manager_agent_id: "manager_agent_id",
            termination_token: "termination_token",
            max_turns: 1,
            sleeptime_agent_frequency: 1,
            turns_counter: 1,
            last_processed_message_id: "last_processed_message_id",
            max_message_buffer_length: 1,
            min_message_buffer_length: 1,
        };
        server
            .mockEndpoint()
            .patch("/v1/groups/group_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.modify("group_id");
        expect(response).toEqual({
            id: "id",
            manager_type: "round_robin",
            agent_ids: ["agent_ids"],
            description: "description",
            project_id: "project_id",
            shared_block_ids: ["shared_block_ids"],
            manager_agent_id: "manager_agent_id",
            termination_token: "termination_token",
            max_turns: 1,
            sleeptime_agent_frequency: 1,
            turns_counter: 1,
            last_processed_message_id: "last_processed_message_id",
            max_message_buffer_length: 1,
            min_message_buffer_length: 1,
        });
    });
});
