/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";
import * as Letta from "../../src/api/index";

describe("Blocks", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                value: "value",
                limit: 1,
                project_id: "project_id",
                name: "name",
                is_template: true,
                preserve_on_migration: true,
                label: "label",
                read_only: true,
                description: "description",
                metadata: { key: "value" },
                id: "block-123e4567-e89b-12d3-a456-426614174000",
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
            },
        ];
        server.mockEndpoint().get("/v1/blocks/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.blocks.list();
        expect(response).toEqual([
            {
                value: "value",
                limit: 1,
                project_id: "project_id",
                name: "name",
                is_template: true,
                preserve_on_migration: true,
                label: "label",
                read_only: true,
                description: "description",
                metadata: {
                    key: "value",
                },
                id: "block-123e4567-e89b-12d3-a456-426614174000",
                created_by_id: "created_by_id",
                last_updated_by_id: "last_updated_by_id",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { value: "value", label: "label" };
        const rawResponseBody = {
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: { key: "value" },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        };
        server
            .mockEndpoint()
            .post("/v1/blocks/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.blocks.create({
            value: "value",
            label: "label",
        });
        expect(response).toEqual({
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: {
                key: "value",
            },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        });
    });

    test("count", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = 1;
        server.mockEndpoint().get("/v1/blocks/count").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.blocks.count();
        expect(response).toEqual(1);
    });

    test("retrieve", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: { key: "value" },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        };
        server
            .mockEndpoint()
            .get("/v1/blocks/block_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.blocks.retrieve("block_id");
        expect(response).toEqual({
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: {
                key: "value",
            },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/blocks/block_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.blocks.delete("block_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: { key: "value" },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        };
        server
            .mockEndpoint()
            .patch("/v1/blocks/block_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.blocks.modify("block_id", {});
        expect(response).toEqual({
            value: "value",
            limit: 1,
            project_id: "project_id",
            name: "name",
            is_template: true,
            preserve_on_migration: true,
            label: "label",
            read_only: true,
            description: "description",
            metadata: {
                key: "value",
            },
            id: "block-123e4567-e89b-12d3-a456-426614174000",
            created_by_id: "created_by_id",
            last_updated_by_id: "last_updated_by_id",
        });
    });
});
