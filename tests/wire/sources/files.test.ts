/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";

describe("Files", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                source_id: "source_id",
                file_name: "file_name",
                original_file_name: "original_file_name",
                file_path: "file_path",
                file_type: "file_type",
                file_size: 1,
                file_creation_date: "file_creation_date",
                file_last_modified_date: "file_last_modified_date",
                processing_status: "pending",
                error_message: "error_message",
                total_chunks: 1,
                chunks_embedded: 1,
                content: "content",
                id: "file-123e4567-e89b-12d3-a456-426614174000",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/sources/source_id/files")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sources.files.list("source_id");
        expect(response).toEqual([
            {
                source_id: "source_id",
                file_name: "file_name",
                original_file_name: "original_file_name",
                file_path: "file_path",
                file_type: "file_type",
                file_size: 1,
                file_creation_date: "file_creation_date",
                file_last_modified_date: "file_last_modified_date",
                processing_status: "pending",
                error_message: "error_message",
                total_chunks: 1,
                chunks_embedded: 1,
                content: "content",
                id: "file-123e4567-e89b-12d3-a456-426614174000",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/v1/sources/source_id/file_id").respondWith().statusCode(200).build();

        const response = await client.sources.files.delete("source_id", "file_id");
        expect(response).toEqual(undefined);
    });
});
