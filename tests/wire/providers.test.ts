/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";

describe("Providers", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                provider_type: "anthropic",
                provider_category: "base",
                api_key: "api_key",
                base_url: "base_url",
                access_key: "access_key",
                region: "region",
                updated_at: "2024-01-15T09:30:00Z",
            },
        ];
        server.mockEndpoint().get("/v1/providers/").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.providers.list();
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                provider_type: "anthropic",
                provider_category: "base",
                api_key: "api_key",
                base_url: "base_url",
                access_key: "access_key",
                region: "region",
                updated_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", provider_type: "anthropic", api_key: "api_key" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            provider_type: "anthropic",
            provider_category: "base",
            api_key: "api_key",
            base_url: "base_url",
            access_key: "access_key",
            region: "region",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/v1/providers/")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.create({
            name: "name",
            provider_type: "anthropic",
            api_key: "api_key",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            provider_type: "anthropic",
            provider_category: "base",
            api_key: "api_key",
            base_url: "base_url",
            access_key: "access_key",
            region: "region",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/providers/provider_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.delete("provider_id");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { api_key: "api_key" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            provider_type: "anthropic",
            provider_category: "base",
            api_key: "api_key",
            base_url: "base_url",
            access_key: "access_key",
            region: "region",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/v1/providers/provider_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.modify("provider_id", {
            api_key: "api_key",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            provider_type: "anthropic",
            provider_category: "base",
            api_key: "api_key",
            base_url: "base_url",
            access_key: "access_key",
            region: "region",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("check", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/v1/providers/check")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.providers.check();
        expect(response).toEqual({
            key: "value",
        });
    });
});
