/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { LettaClient } from "../../src/Client";

describe("ClientSideAccessTokens", () => {
    test("clientSideAccessTokens.listClientSideAccessTokens", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tokens: [
                {
                    policy: { version: "1", data: [{ type: "agent", id: "id", access: ["read_messages"] }] },
                    token: "token",
                    hostname: "hostname",
                    expiresAt: "expiresAt",
                },
            ],
            hasNextPage: true,
        };
        server
            .mockEndpoint()
            .get("/v1/client-side-access-tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clientSideAccessTokens.clientSideAccessTokensListClientSideAccessTokens();
        expect(response).toEqual({
            tokens: [
                {
                    policy: {
                        version: "1",
                        data: [
                            {
                                type: "agent",
                                id: "id",
                                access: ["read_messages"],
                            },
                        ],
                    },
                    token: "token",
                    hostname: "hostname",
                    expiresAt: "expiresAt",
                },
            ],
            hasNextPage: true,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = {
            policy: [{ type: "agent", id: "id", access: ["read_messages"] }],
            hostname: "hostname",
        };
        const rawResponseBody = {
            policy: { version: "1", data: [{ type: "agent", id: "id", access: ["read_messages"] }] },
            token: "token",
            hostname: "hostname",
            expiresAt: "expiresAt",
        };
        server
            .mockEndpoint()
            .post("/v1/client-side-access-tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clientSideAccessTokens.create({
            policy: [
                {
                    type: "agent",
                    id: "id",
                    access: ["read_messages"],
                },
            ],
            hostname: "hostname",
        });
        expect(response).toEqual({
            policy: {
                version: "1",
                data: [
                    {
                        type: "agent",
                        id: "id",
                        access: ["read_messages"],
                    },
                ],
            },
            token: "token",
            hostname: "hostname",
            expiresAt: "expiresAt",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/v1/client-side-access-tokens/token")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clientSideAccessTokens.delete("token", {
            key: "value",
        });
        expect(response).toEqual({
            key: "value",
        });
    });
});
