/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { LettaClient } from "../../../src/Client";

describe("Messages", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                date: "2024-01-15T09:30:00Z",
                name: "name",
                message_type: "system_message",
                otid: "otid",
                sender_id: "sender_id",
                step_id: "step_id",
                is_err: true,
                content: "content",
            },
        ];
        server
            .mockEndpoint()
            .get("/v1/groups/group_id/messages")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.messages.list("group_id");
        expect(response).toEqual([
            {
                id: "id",
                date: "2024-01-15T09:30:00Z",
                name: "name",
                message_type: "system_message",
                otid: "otid",
                sender_id: "sender_id",
                step_id: "step_id",
                is_err: true,
                content: "content",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { messages: [{ role: "user", content: [{ type: "text", text: "text" }] }] };
        const rawResponseBody = {
            messages: [
                {
                    id: "id",
                    date: "2024-01-15T09:30:00Z",
                    name: "name",
                    message_type: "system_message",
                    otid: "otid",
                    sender_id: "sender_id",
                    step_id: "step_id",
                    is_err: true,
                    content: "content",
                },
            ],
            stop_reason: { message_type: "stop_reason", stop_reason: "end_turn" },
            usage: {
                message_type: "usage_statistics",
                completion_tokens: 1,
                prompt_tokens: 1,
                total_tokens: 1,
                step_count: 1,
                steps_messages: [[{ id: "message-123e4567-e89b-12d3-a456-426614174000", role: "assistant" }]],
                run_ids: ["run_ids"],
            },
        };
        server
            .mockEndpoint()
            .post("/v1/groups/group_id/messages")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.messages.create("group_id", {
            messages: [
                {
                    role: "user",
                    content: [
                        {
                            type: "text",
                            text: "text",
                        },
                    ],
                },
            ],
        });
        expect(response).toEqual({
            messages: [
                {
                    id: "id",
                    date: "2024-01-15T09:30:00Z",
                    name: "name",
                    message_type: "system_message",
                    otid: "otid",
                    sender_id: "sender_id",
                    step_id: "step_id",
                    is_err: true,
                    content: "content",
                },
            ],
            stop_reason: {
                message_type: "stop_reason",
                stop_reason: "end_turn",
            },
            usage: {
                message_type: "usage_statistics",
                completion_tokens: 1,
                prompt_tokens: 1,
                total_tokens: 1,
                step_count: 1,
                steps_messages: [
                    [
                        {
                            id: "message-123e4567-e89b-12d3-a456-426614174000",
                            role: "assistant",
                        },
                    ],
                ],
                run_ids: ["run_ids"],
            },
        });
    });

    test("modify", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });
        const rawRequestBody = { content: "content" };
        const rawResponseBody = {
            id: "id",
            date: "2024-01-15T09:30:00Z",
            name: "name",
            message_type: "system_message",
            otid: "otid",
            sender_id: "sender_id",
            step_id: "step_id",
            is_err: true,
            content: "content",
        };
        server
            .mockEndpoint()
            .patch("/v1/groups/group_id/messages/message_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.messages.modify("group_id", "message_id", {
            content: "content",
        });
        expect(response).toEqual({
            id: "id",
            date: "2024-01-15T09:30:00Z",
            name: "name",
            message_type: "system_message",
            otid: "otid",
            sender_id: "sender_id",
            step_id: "step_id",
            is_err: true,
            content: "content",
        });
    });

    test("reset", async () => {
        const server = mockServerPool.createServer();
        const client = new LettaClient({ token: "test", project: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/v1/groups/group_id/reset-messages")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.groups.messages.reset("group_id");
        expect(response).toEqual({
            key: "value",
        });
    });
});
