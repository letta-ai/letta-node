/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { LettaSchemasOpenaiChatCompletionRequestTool } from "./LettaSchemasOpenaiChatCompletionRequestTool";
import { LettaSchemasMessageMessage } from "./LettaSchemasMessageMessage";

export const ContextWindowOverview: core.serialization.ObjectSchema<
    serializers.ContextWindowOverview.Raw,
    Letta.ContextWindowOverview
> = core.serialization.object({
    contextWindowSizeMax: core.serialization.property("context_window_size_max", core.serialization.number()),
    contextWindowSizeCurrent: core.serialization.property("context_window_size_current", core.serialization.number()),
    numMessages: core.serialization.property("num_messages", core.serialization.number()),
    numArchivalMemory: core.serialization.property("num_archival_memory", core.serialization.number()),
    numRecallMemory: core.serialization.property("num_recall_memory", core.serialization.number()),
    numTokensExternalMemorySummary: core.serialization.property(
        "num_tokens_external_memory_summary",
        core.serialization.number()
    ),
    externalMemorySummary: core.serialization.property("external_memory_summary", core.serialization.string()),
    numTokensSystem: core.serialization.property("num_tokens_system", core.serialization.number()),
    systemPrompt: core.serialization.property("system_prompt", core.serialization.string()),
    numTokensCoreMemory: core.serialization.property("num_tokens_core_memory", core.serialization.number()),
    coreMemory: core.serialization.property("core_memory", core.serialization.string()),
    numTokensSummaryMemory: core.serialization.property("num_tokens_summary_memory", core.serialization.number()),
    summaryMemory: core.serialization.property("summary_memory", core.serialization.string().optional()),
    numTokensFunctionsDefinitions: core.serialization.property(
        "num_tokens_functions_definitions",
        core.serialization.number()
    ),
    functionsDefinitions: core.serialization.property(
        "functions_definitions",
        core.serialization.list(LettaSchemasOpenaiChatCompletionRequestTool).optional()
    ),
    numTokensMessages: core.serialization.property("num_tokens_messages", core.serialization.number()),
    messages: core.serialization.list(LettaSchemasMessageMessage),
});

export declare namespace ContextWindowOverview {
    interface Raw {
        context_window_size_max: number;
        context_window_size_current: number;
        num_messages: number;
        num_archival_memory: number;
        num_recall_memory: number;
        num_tokens_external_memory_summary: number;
        external_memory_summary: string;
        num_tokens_system: number;
        system_prompt: string;
        num_tokens_core_memory: number;
        core_memory: string;
        num_tokens_summary_memory: number;
        summary_memory?: string | null;
        num_tokens_functions_definitions: number;
        functions_definitions?: LettaSchemasOpenaiChatCompletionRequestTool.Raw[] | null;
        num_tokens_messages: number;
        messages: LettaSchemasMessageMessage.Raw[];
    }
}
