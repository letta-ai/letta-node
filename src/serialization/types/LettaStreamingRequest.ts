/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { MessageCreate } from "./MessageCreate";
import { MessageType } from "./MessageType";

export const LettaStreamingRequest: core.serialization.ObjectSchema<
    serializers.LettaStreamingRequest.Raw,
    Letta.LettaStreamingRequest
> = core.serialization.object({
    messages: core.serialization.list(MessageCreate),
    maxSteps: core.serialization.property("max_steps", core.serialization.number().optional()),
    useAssistantMessage: core.serialization.property("use_assistant_message", core.serialization.boolean().optional()),
    assistantMessageToolName: core.serialization.property(
        "assistant_message_tool_name",
        core.serialization.string().optional(),
    ),
    assistantMessageToolKwarg: core.serialization.property(
        "assistant_message_tool_kwarg",
        core.serialization.string().optional(),
    ),
    includeReturnMessageTypes: core.serialization.property(
        "include_return_message_types",
        core.serialization.list(MessageType).optional(),
    ),
    streamTokens: core.serialization.property("stream_tokens", core.serialization.boolean().optional()),
});

export declare namespace LettaStreamingRequest {
    export interface Raw {
        messages: MessageCreate.Raw[];
        max_steps?: number | null;
        use_assistant_message?: boolean | null;
        assistant_message_tool_name?: string | null;
        assistant_message_tool_kwarg?: string | null;
        include_return_message_types?: MessageType.Raw[] | null;
        stream_tokens?: boolean | null;
    }
}
