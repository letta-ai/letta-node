/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { Annotation } from "./Annotation";
import { ChatCompletionAudio } from "./ChatCompletionAudio";
import { FunctionCallOutput } from "./FunctionCallOutput";
import { ChatCompletionMessageToolCallsItem } from "./ChatCompletionMessageToolCallsItem";

export const ChatCompletionMessage: core.serialization.ObjectSchema<
    serializers.ChatCompletionMessage.Raw,
    Letta.ChatCompletionMessage
> = core.serialization
    .object({
        content: core.serialization.string().optional(),
        refusal: core.serialization.string().optional(),
        role: core.serialization.stringLiteral("assistant"),
        annotations: core.serialization.list(Annotation).optional(),
        audio: ChatCompletionAudio.optional(),
        functionCall: core.serialization.property("function_call", FunctionCallOutput.optional()),
        toolCalls: core.serialization.property(
            "tool_calls",
            core.serialization.list(ChatCompletionMessageToolCallsItem).optional(),
        ),
    })
    .passthrough();

export declare namespace ChatCompletionMessage {
    export interface Raw {
        content?: string | null;
        refusal?: string | null;
        role: "assistant";
        annotations?: Annotation.Raw[] | null;
        audio?: ChatCompletionAudio.Raw | null;
        function_call?: FunctionCallOutput.Raw | null;
        tool_calls?: ChatCompletionMessageToolCallsItem.Raw[] | null;
        [key: string]: any;
    }
}
