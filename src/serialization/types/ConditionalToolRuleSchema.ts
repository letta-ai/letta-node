/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";

export const ConditionalToolRuleSchema: core.serialization.ObjectSchema<
    serializers.ConditionalToolRuleSchema.Raw,
    Letta.ConditionalToolRuleSchema
> = core.serialization.object({
    toolName: core.serialization.property("tool_name", core.serialization.string()),
    type: core.serialization.string(),
    defaultChild: core.serialization.property("default_child", core.serialization.string().optional()),
    childOutputMapping: core.serialization.property(
        "child_output_mapping",
        core.serialization.record(core.serialization.string(), core.serialization.string()),
    ),
    requireOutputMapping: core.serialization.property("require_output_mapping", core.serialization.boolean()),
});

export declare namespace ConditionalToolRuleSchema {
    export interface Raw {
        tool_name: string;
        type: string;
        default_child?: string | null;
        child_output_mapping: Record<string, string>;
        require_output_mapping: boolean;
    }
}
