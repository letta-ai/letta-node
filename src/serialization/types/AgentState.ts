/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { AgentStateToolRulesItem } from "./AgentStateToolRulesItem";
import { AgentType } from "./AgentType";
import { LlmConfig } from "./LlmConfig";
import { EmbeddingConfig } from "./EmbeddingConfig";
import { AgentStateResponseFormat } from "./AgentStateResponseFormat";
import { Memory } from "./Memory";
import { Tool } from "./Tool";
import { Source } from "./Source";
import { AgentEnvironmentVariable } from "./AgentEnvironmentVariable";
import { Group } from "./Group";

export const AgentState: core.serialization.ObjectSchema<serializers.AgentState.Raw, Letta.AgentState> =
    core.serialization.object({
        createdById: core.serialization.property("created_by_id", core.serialization.string().optional()),
        lastUpdatedById: core.serialization.property("last_updated_by_id", core.serialization.string().optional()),
        createdAt: core.serialization.property("created_at", core.serialization.date().optional()),
        updatedAt: core.serialization.property("updated_at", core.serialization.date().optional()),
        id: core.serialization.string(),
        name: core.serialization.string(),
        toolRules: core.serialization.property(
            "tool_rules",
            core.serialization.list(AgentStateToolRulesItem).optional(),
        ),
        messageIds: core.serialization.property(
            "message_ids",
            core.serialization.list(core.serialization.string()).optional(),
        ),
        system: core.serialization.string(),
        agentType: core.serialization.property("agent_type", AgentType),
        llmConfig: core.serialization.property("llm_config", LlmConfig),
        embeddingConfig: core.serialization.property("embedding_config", EmbeddingConfig),
        responseFormat: core.serialization.property("response_format", AgentStateResponseFormat.optional()),
        description: core.serialization.string().optional(),
        metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        memory: Memory,
        tools: core.serialization.list(Tool),
        sources: core.serialization.list(Source),
        tags: core.serialization.list(core.serialization.string()),
        toolExecEnvironmentVariables: core.serialization.property(
            "tool_exec_environment_variables",
            core.serialization.list(AgentEnvironmentVariable).optional(),
        ),
        projectId: core.serialization.property("project_id", core.serialization.string().optional()),
        templateId: core.serialization.property("template_id", core.serialization.string().optional()),
        baseTemplateId: core.serialization.property("base_template_id", core.serialization.string().optional()),
        identityIds: core.serialization.property(
            "identity_ids",
            core.serialization.list(core.serialization.string()).optional(),
        ),
        messageBufferAutoclear: core.serialization.property(
            "message_buffer_autoclear",
            core.serialization.boolean().optional(),
        ),
        enableSleeptime: core.serialization.property("enable_sleeptime", core.serialization.boolean().optional()),
        multiAgentGroup: core.serialization.property("multi_agent_group", Group.optional()),
        lastRunCompletion: core.serialization.property("last_run_completion", core.serialization.date().optional()),
        lastRunDurationMs: core.serialization.property("last_run_duration_ms", core.serialization.number().optional()),
        timezone: core.serialization.string().optional(),
        maxFilesOpen: core.serialization.property("max_files_open", core.serialization.number().optional()),
        perFileViewWindowCharLimit: core.serialization.property(
            "per_file_view_window_char_limit",
            core.serialization.number().optional(),
        ),
        hidden: core.serialization.boolean().optional(),
    });

export declare namespace AgentState {
    export interface Raw {
        created_by_id?: string | null;
        last_updated_by_id?: string | null;
        created_at?: string | null;
        updated_at?: string | null;
        id: string;
        name: string;
        tool_rules?: AgentStateToolRulesItem.Raw[] | null;
        message_ids?: string[] | null;
        system: string;
        agent_type: AgentType.Raw;
        llm_config: LlmConfig.Raw;
        embedding_config: EmbeddingConfig.Raw;
        response_format?: AgentStateResponseFormat.Raw | null;
        description?: string | null;
        metadata?: Record<string, unknown> | null;
        memory: Memory.Raw;
        tools: Tool.Raw[];
        sources: Source.Raw[];
        tags: string[];
        tool_exec_environment_variables?: AgentEnvironmentVariable.Raw[] | null;
        project_id?: string | null;
        template_id?: string | null;
        base_template_id?: string | null;
        identity_ids?: string[] | null;
        message_buffer_autoclear?: boolean | null;
        enable_sleeptime?: boolean | null;
        multi_agent_group?: Group.Raw | null;
        last_run_completion?: string | null;
        last_run_duration_ms?: number | null;
        timezone?: string | null;
        max_files_open?: number | null;
        per_file_view_window_char_limit?: number | null;
        hidden?: boolean | null;
    }
}
