/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { LettaRequestMessagesItem } from "./LettaRequestMessagesItem";
import { MessageType } from "./MessageType";

export const LettaRequest: core.serialization.ObjectSchema<serializers.LettaRequest.Raw, Letta.LettaRequest> =
    core.serialization.object({
        messages: core.serialization.list(LettaRequestMessagesItem),
        maxSteps: core.serialization.property("max_steps", core.serialization.number().optional()),
        useAssistantMessage: core.serialization.property(
            "use_assistant_message",
            core.serialization.boolean().optional(),
        ),
        assistantMessageToolName: core.serialization.property(
            "assistant_message_tool_name",
            core.serialization.string().optional(),
        ),
        assistantMessageToolKwarg: core.serialization.property(
            "assistant_message_tool_kwarg",
            core.serialization.string().optional(),
        ),
        includeReturnMessageTypes: core.serialization.property(
            "include_return_message_types",
            core.serialization.list(MessageType).optional(),
        ),
        enableThinking: core.serialization.property("enable_thinking", core.serialization.string().optional()),
    });

export declare namespace LettaRequest {
    export interface Raw {
        messages: LettaRequestMessagesItem.Raw[];
        max_steps?: number | null;
        use_assistant_message?: boolean | null;
        assistant_message_tool_name?: string | null;
        assistant_message_tool_kwarg?: string | null;
        include_return_message_types?: MessageType.Raw[] | null;
        enable_thinking?: string | null;
    }
}
