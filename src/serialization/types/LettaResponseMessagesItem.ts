/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { SystemMessageOutput } from "./SystemMessageOutput";
import { UserMessageOutput } from "./UserMessageOutput";
import { ReasoningMessage } from "./ReasoningMessage";
import { ToolCallMessage } from "./ToolCallMessage";
import { ToolReturnMessage } from "./ToolReturnMessage";
import { AssistantMessageOutput } from "./AssistantMessageOutput";

export const LettaResponseMessagesItem: core.serialization.Schema<
    serializers.LettaResponseMessagesItem.Raw,
    Letta.LettaResponseMessagesItem
> = core.serialization
    .union(core.serialization.discriminant("messageType", "message_type"), {
        system_message: SystemMessageOutput,
        user_message: UserMessageOutput,
        reasoning_message: ReasoningMessage,
        tool_call_message: ToolCallMessage,
        tool_return_message: ToolReturnMessage,
        assistant_message: AssistantMessageOutput,
    })
    .transform<Letta.LettaResponseMessagesItem>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace LettaResponseMessagesItem {
    export type Raw =
        | LettaResponseMessagesItem.SystemMessage
        | LettaResponseMessagesItem.UserMessage
        | LettaResponseMessagesItem.ReasoningMessage
        | LettaResponseMessagesItem.ToolCallMessage
        | LettaResponseMessagesItem.ToolReturnMessage
        | LettaResponseMessagesItem.AssistantMessage;

    export interface SystemMessage extends SystemMessageOutput.Raw {
        message_type: "system_message";
    }

    export interface UserMessage extends UserMessageOutput.Raw {
        message_type: "user_message";
    }

    export interface ReasoningMessage extends ReasoningMessage.Raw {
        message_type: "reasoning_message";
    }

    export interface ToolCallMessage extends ToolCallMessage.Raw {
        message_type: "tool_call_message";
    }

    export interface ToolReturnMessage extends ToolReturnMessage.Raw {
        message_type: "tool_return_message";
    }

    export interface AssistantMessage extends AssistantMessageOutput.Raw {
        message_type: "assistant_message";
    }
}
