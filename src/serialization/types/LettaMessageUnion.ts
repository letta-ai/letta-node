/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { SystemMessage } from "./SystemMessage";
import { UserMessage } from "./UserMessage";
import { ReasoningMessage } from "./ReasoningMessage";
import { HiddenReasoningMessage } from "./HiddenReasoningMessage";
import { ToolCallMessage } from "./ToolCallMessage";
import { ToolReturnMessage } from "./ToolReturnMessage";
import { AssistantMessage } from "./AssistantMessage";
import { ApprovalRequestMessage } from "./ApprovalRequestMessage";
import { ApprovalResponseMessage } from "./ApprovalResponseMessage";

export const LettaMessageUnion: core.serialization.Schema<serializers.LettaMessageUnion.Raw, Letta.LettaMessageUnion> =
    core.serialization.undiscriminatedUnion([
        SystemMessage,
        UserMessage,
        ReasoningMessage,
        HiddenReasoningMessage,
        ToolCallMessage,
        ToolReturnMessage,
        AssistantMessage,
        ApprovalRequestMessage,
        ApprovalResponseMessage,
    ]);

export declare namespace LettaMessageUnion {
    export type Raw =
        | SystemMessage.Raw
        | UserMessage.Raw
        | ReasoningMessage.Raw
        | HiddenReasoningMessage.Raw
        | ToolCallMessage.Raw
        | ToolReturnMessage.Raw
        | AssistantMessage.Raw
        | ApprovalRequestMessage.Raw
        | ApprovalResponseMessage.Raw;
}
