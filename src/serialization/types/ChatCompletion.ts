/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";
import { Choice } from "./Choice";
import { ChatCompletionServiceTier } from "./ChatCompletionServiceTier";
import { CompletionUsage } from "./CompletionUsage";

export const ChatCompletion: core.serialization.ObjectSchema<serializers.ChatCompletion.Raw, Letta.ChatCompletion> =
    core.serialization
        .object({
            id: core.serialization.string(),
            choices: core.serialization.list(Choice),
            created: core.serialization.number(),
            model: core.serialization.string(),
            object: core.serialization.stringLiteral("chat.completion"),
            serviceTier: core.serialization.property("service_tier", ChatCompletionServiceTier.optional()),
            systemFingerprint: core.serialization.property(
                "system_fingerprint",
                core.serialization.string().optional(),
            ),
            usage: CompletionUsage.optional(),
        })
        .passthrough();

export declare namespace ChatCompletion {
    export interface Raw {
        id: string;
        choices: Choice.Raw[];
        created: number;
        model: string;
        object: "chat.completion";
        service_tier?: ChatCompletionServiceTier.Raw | null;
        system_fingerprint?: string | null;
        usage?: CompletionUsage.Raw | null;
        [key: string]: any;
    }
}
