/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Letta from "../../api/index";
import * as core from "../../core";

export const Block: core.serialization.ObjectSchema<serializers.Block.Raw, Letta.Block> = core.serialization.object({
    value: core.serialization.string(),
    limit: core.serialization.number().optional(),
    name: core.serialization.string().optional(),
    isTemplate: core.serialization.property("is_template", core.serialization.boolean().optional()),
    label: core.serialization.string().optional(),
    readOnly: core.serialization.property("read_only", core.serialization.boolean().optional()),
    description: core.serialization.string().optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    id: core.serialization.string().optional(),
    createdById: core.serialization.property("created_by_id", core.serialization.string().optional()),
    lastUpdatedById: core.serialization.property("last_updated_by_id", core.serialization.string().optional()),
});

export declare namespace Block {
    export interface Raw {
        value: string;
        limit?: number | null;
        name?: string | null;
        is_template?: boolean | null;
        label?: string | null;
        read_only?: boolean | null;
        description?: string | null;
        metadata?: Record<string, unknown> | null;
        id?: string | null;
        created_by_id?: string | null;
        last_updated_by_id?: string | null;
    }
}
