/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Letta from "../../../../../api/index";
import * as core from "../../../../../core";
import { AgentsSearchDeployedAgentsRequestSearchItem } from "../../types/AgentsSearchDeployedAgentsRequestSearchItem";
import { AgentsSearchDeployedAgentsRequestCombinator } from "../../types/AgentsSearchDeployedAgentsRequestCombinator";

export const AgentsSearchDeployedAgentsRequest: core.serialization.Schema<
    serializers.AgentsSearchDeployedAgentsRequest.Raw,
    Letta.AgentsSearchDeployedAgentsRequest
> = core.serialization.object({
    search: core.serialization.list(AgentsSearchDeployedAgentsRequestSearchItem).optional(),
    projectId: core.serialization.property("project_id", core.serialization.string().optional()),
    combinator: AgentsSearchDeployedAgentsRequestCombinator.optional(),
    limit: core.serialization.number().optional(),
    offset: core.serialization.number().optional(),
});

export declare namespace AgentsSearchDeployedAgentsRequest {
    interface Raw {
        search?: AgentsSearchDeployedAgentsRequestSearchItem.Raw[] | null;
        project_id?: string | null;
        combinator?: AgentsSearchDeployedAgentsRequestCombinator.Raw | null;
        limit?: number | null;
        offset?: number | null;
    }
}
