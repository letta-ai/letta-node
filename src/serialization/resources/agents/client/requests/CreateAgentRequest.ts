/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Letta from "../../../../../api/index";
import * as core from "../../../../../core";
import { CreateBlock } from "../../../../types/CreateBlock";
import { CreateAgentRequestToolRulesItem } from "../../types/CreateAgentRequestToolRulesItem";
import { AgentType } from "../../../../types/AgentType";
import { LlmConfig } from "../../../../types/LlmConfig";
import { EmbeddingConfig } from "../../../../types/EmbeddingConfig";
import { MessageCreate } from "../../../../types/MessageCreate";

export const CreateAgentRequest: core.serialization.Schema<
    serializers.CreateAgentRequest.Raw,
    Omit<Letta.CreateAgentRequest, "project">
> = core.serialization.object({
    name: core.serialization.string().optional(),
    memoryBlocks: core.serialization.property("memory_blocks", core.serialization.list(CreateBlock).optional()),
    tools: core.serialization.list(core.serialization.string()).optional(),
    toolIds: core.serialization.property("tool_ids", core.serialization.list(core.serialization.string()).optional()),
    sourceIds: core.serialization.property(
        "source_ids",
        core.serialization.list(core.serialization.string()).optional(),
    ),
    blockIds: core.serialization.property("block_ids", core.serialization.list(core.serialization.string()).optional()),
    toolRules: core.serialization.property(
        "tool_rules",
        core.serialization.list(CreateAgentRequestToolRulesItem).optional(),
    ),
    tags: core.serialization.list(core.serialization.string()).optional(),
    system: core.serialization.string().optional(),
    agentType: core.serialization.property("agent_type", AgentType.optional()),
    llmConfig: core.serialization.property("llm_config", LlmConfig.optional()),
    embeddingConfig: core.serialization.property("embedding_config", EmbeddingConfig.optional()),
    initialMessageSequence: core.serialization.property(
        "initial_message_sequence",
        core.serialization.list(MessageCreate).optional(),
    ),
    includeBaseTools: core.serialization.property("include_base_tools", core.serialization.boolean().optional()),
    includeMultiAgentTools: core.serialization.property(
        "include_multi_agent_tools",
        core.serialization.boolean().optional(),
    ),
    includeBaseToolRules: core.serialization.property(
        "include_base_tool_rules",
        core.serialization.boolean().optional(),
    ),
    description: core.serialization.string().optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    model: core.serialization.string().optional(),
    embedding: core.serialization.string().optional(),
    contextWindowLimit: core.serialization.property("context_window_limit", core.serialization.number().optional()),
    embeddingChunkSize: core.serialization.property("embedding_chunk_size", core.serialization.number().optional()),
    fromTemplate: core.serialization.property("from_template", core.serialization.string().optional()),
    template: core.serialization.boolean().optional(),
    createAgentRequestProject: core.serialization.property("project", core.serialization.string().optional()),
    toolExecEnvironmentVariables: core.serialization.property(
        "tool_exec_environment_variables",
        core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional(),
    ),
    memoryVariables: core.serialization.property(
        "memory_variables",
        core.serialization.record(core.serialization.string(), core.serialization.string().optional()).optional(),
    ),
    projectId: core.serialization.property("project_id", core.serialization.string().optional()),
    templateId: core.serialization.property("template_id", core.serialization.string().optional()),
    baseTemplateId: core.serialization.property("base_template_id", core.serialization.string().optional()),
    identifierKey: core.serialization.property("identifier_key", core.serialization.string().optional()),
    messageBufferAutoclear: core.serialization.property(
        "message_buffer_autoclear",
        core.serialization.boolean().optional(),
    ),
});

export declare namespace CreateAgentRequest {
    export interface Raw {
        name?: string | null;
        memory_blocks?: CreateBlock.Raw[] | null;
        tools?: string[] | null;
        tool_ids?: string[] | null;
        source_ids?: string[] | null;
        block_ids?: string[] | null;
        tool_rules?: CreateAgentRequestToolRulesItem.Raw[] | null;
        tags?: string[] | null;
        system?: string | null;
        agent_type?: AgentType.Raw | null;
        llm_config?: LlmConfig.Raw | null;
        embedding_config?: EmbeddingConfig.Raw | null;
        initial_message_sequence?: MessageCreate.Raw[] | null;
        include_base_tools?: boolean | null;
        include_multi_agent_tools?: boolean | null;
        include_base_tool_rules?: boolean | null;
        description?: string | null;
        metadata?: Record<string, unknown> | null;
        model?: string | null;
        embedding?: string | null;
        context_window_limit?: number | null;
        embedding_chunk_size?: number | null;
        from_template?: string | null;
        template?: boolean | null;
        project?: string | null;
        tool_exec_environment_variables?: Record<string, string | null | undefined> | null;
        memory_variables?: Record<string, string | null | undefined> | null;
        project_id?: string | null;
        template_id?: string | null;
        base_template_id?: string | null;
        identifier_key?: string | null;
        message_buffer_autoclear?: boolean | null;
    }
}
