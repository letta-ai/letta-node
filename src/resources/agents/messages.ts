// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../resource';
import { isRequestOptions } from '../../core';
import * as Core from '../../core';

export class Messages extends APIResource {
  /**
   * Process a user message and return the agent's response. This endpoint accepts a
   * message from a user and processes it through the agent.
   */
  create(
    agentId: string,
    body: MessageCreateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageCreateResponse> {
    return this._client.post(`/v1/agents/${agentId}/messages`, { body, ...options });
  }

  /**
   * Update the details of a message associated with an agent.
   */
  update(
    agentId: string,
    messageId: string,
    body: MessageUpdateParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageUpdateResponse> {
    return this._client.patch(`/v1/agents/${agentId}/messages/${messageId}`, { body, ...options });
  }

  /**
   * Retrieve message history for an agent.
   */
  list(
    agentId: string,
    query?: MessageListParams,
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageListResponse>;
  list(agentId: string, options?: Core.RequestOptions): Core.APIPromise<MessageListResponse>;
  list(
    agentId: string,
    query: MessageListParams | Core.RequestOptions = {},
    options?: Core.RequestOptions,
  ): Core.APIPromise<MessageListResponse> {
    if (isRequestOptions(query)) {
      return this.list(agentId, {}, query);
    }
    return this._client.get(`/v1/agents/${agentId}/messages`, { query, ...options });
  }
}

export interface MessageCreateResponse {
  AssistantMessage?: MessageCreateResponse.AssistantMessage;

  /**
   * Representation of an agent's internal monologue.
   *
   * Attributes: internal_monologue (str): The internal monologue of the agent id
   * (str): The ID of the message date (datetime): The date the message was created
   * in ISO format
   */
  InternalMonologue?: MessageCreateResponse.InternalMonologue;

  /**
   * Usage statistics for the agent interaction.
   *
   * Attributes: completion_tokens (int): The number of tokens generated by the
   * agent. prompt_tokens (int): The number of tokens in the prompt. total_tokens
   * (int): The total number of tokens processed by the agent. step_count (int): The
   * number of steps taken by the agent.
   */
  LettaUsageStatistics?: MessageCreateResponse.LettaUsageStatistics;

  /**
   * A message generated by the system. Never streamed back on a response, only used
   * for cursor pagination.
   *
   * Attributes: message (str): The message sent by the system id (str): The ID of
   * the message date (datetime): The date the message was created in ISO format
   */
  SystemMessage?: MessageCreateResponse.SystemMessage;

  ToolCall?: MessageCreateResponse.ToolCall;

  ToolCallDelta?: MessageCreateResponse.ToolCallDelta;

  /**
   * A message representing a request to call a tool (generated by the LLM to trigger
   * tool execution).
   *
   * Attributes: tool_call (Union[ToolCall, ToolCallDelta]): The tool call id (str):
   * The ID of the message date (datetime): The date the message was created in ISO
   * format
   */
  ToolCallMessage?: MessageCreateResponse.ToolCallMessage;

  /**
   * A message representing the return value of a tool call (generated by Letta
   * executing the requested tool).
   *
   * Attributes: tool_return (str): The return value of the tool status
   * (Literal["success", "error"]): The status of the tool call id (str): The ID of
   * the message date (datetime): The date the message was created in ISO format
   * tool_call_id (str): A unique identifier for the tool call that generated this
   * message stdout (Optional[List(str)]): Captured stdout (e.g. prints, logs) from
   * the tool invocation stderr (Optional[List(str)]): Captured stderr from the tool
   * invocation
   */
  ToolReturnMessage?: MessageCreateResponse.ToolReturnMessage;

  /**
   * A message sent by the user. Never streamed back on a response, only used for
   * cursor pagination.
   *
   * Attributes: message (str): The message sent by the user id (str): The ID of the
   * message date (datetime): The date the message was created in ISO format
   */
  UserMessage?: MessageCreateResponse.UserMessage;
}

export namespace MessageCreateResponse {
  export interface AssistantMessage {
    id: string;

    assistant_message: string;

    date: string;

    message_type?: 'assistant_message';
  }

  /**
   * Representation of an agent's internal monologue.
   *
   * Attributes: internal_monologue (str): The internal monologue of the agent id
   * (str): The ID of the message date (datetime): The date the message was created
   * in ISO format
   */
  export interface InternalMonologue {
    id: string;

    date: string;

    internal_monologue: string;

    message_type?: 'internal_monologue';
  }

  /**
   * Usage statistics for the agent interaction.
   *
   * Attributes: completion_tokens (int): The number of tokens generated by the
   * agent. prompt_tokens (int): The number of tokens in the prompt. total_tokens
   * (int): The total number of tokens processed by the agent. step_count (int): The
   * number of steps taken by the agent.
   */
  export interface LettaUsageStatistics {
    /**
     * The number of tokens generated by the agent.
     */
    completion_tokens?: number;

    /**
     * The number of tokens in the prompt.
     */
    prompt_tokens?: number;

    /**
     * The number of steps taken by the agent.
     */
    step_count?: number;

    /**
     * The total number of tokens processed by the agent.
     */
    total_tokens?: number;
  }

  /**
   * A message generated by the system. Never streamed back on a response, only used
   * for cursor pagination.
   *
   * Attributes: message (str): The message sent by the system id (str): The ID of
   * the message date (datetime): The date the message was created in ISO format
   */
  export interface SystemMessage {
    id: string;

    date: string;

    message: string;

    message_type?: 'system_message';
  }

  export interface ToolCall {
    arguments: string;

    name: string;

    tool_call_id: string;
  }

  export interface ToolCallDelta {
    arguments: string | null;

    name: string | null;

    tool_call_id: string | null;
  }

  /**
   * A message representing a request to call a tool (generated by the LLM to trigger
   * tool execution).
   *
   * Attributes: tool_call (Union[ToolCall, ToolCallDelta]): The tool call id (str):
   * The ID of the message date (datetime): The date the message was created in ISO
   * format
   */
  export interface ToolCallMessage {
    id: string;

    date: string;

    tool_call: ToolCallMessage.ToolCall | ToolCallMessage.ToolCallDelta;

    message_type?: 'tool_call_message';
  }

  export namespace ToolCallMessage {
    export interface ToolCall {
      arguments: string;

      name: string;

      tool_call_id: string;
    }

    export interface ToolCallDelta {
      arguments: string | null;

      name: string | null;

      tool_call_id: string | null;
    }
  }

  /**
   * A message representing the return value of a tool call (generated by Letta
   * executing the requested tool).
   *
   * Attributes: tool_return (str): The return value of the tool status
   * (Literal["success", "error"]): The status of the tool call id (str): The ID of
   * the message date (datetime): The date the message was created in ISO format
   * tool_call_id (str): A unique identifier for the tool call that generated this
   * message stdout (Optional[List(str)]): Captured stdout (e.g. prints, logs) from
   * the tool invocation stderr (Optional[List(str)]): Captured stderr from the tool
   * invocation
   */
  export interface ToolReturnMessage {
    id: string;

    date: string;

    status: 'success' | 'error';

    tool_call_id: string;

    tool_return: string;

    message_type?: 'tool_return_message';

    stderr?: Array<string> | null;

    stdout?: Array<string> | null;
  }

  /**
   * A message sent by the user. Never streamed back on a response, only used for
   * cursor pagination.
   *
   * Attributes: message (str): The message sent by the user id (str): The ID of the
   * message date (datetime): The date the message was created in ISO format
   */
  export interface UserMessage {
    id: string;

    date: string;

    message: string;

    message_type?: 'user_message';
  }
}

/**
 * Letta's internal representation of a message. Includes methods to convert
 * to/from LLM provider formats.
 *
 * Attributes: id (str): The unique identifier of the message. role (MessageRole):
 * The role of the participant. text (str): The text of the message. user_id (str):
 * The unique identifier of the user. agent_id (str): The unique identifier of the
 * agent. model (str): The model used to make the function call. name (str): The
 * name of the participant. created_at (datetime): The time the message was
 * created. tool_calls (List[ToolCall]): The list of tool calls requested.
 * tool_call_id (str): The id of the tool call.
 */
export interface MessageUpdateResponse {
  /**
   * The role of the participant.
   */
  role: 'assistant' | 'user' | 'tool' | 'function' | 'system';

  /**
   * The human-friendly ID of the Message
   */
  id?: string;

  /**
   * The unique identifier of the agent.
   */
  agent_id?: string | null;

  /**
   * The timestamp when the object was created.
   */
  created_at?: string;

  /**
   * The id of the user that made this object.
   */
  created_by_id?: string | null;

  /**
   * The id of the user that made this object.
   */
  last_updated_by_id?: string | null;

  /**
   * The model used to make the function call.
   */
  model?: string | null;

  /**
   * The name of the participant.
   */
  name?: string | null;

  /**
   * The unique identifier of the organization.
   */
  organization_id?: string | null;

  /**
   * The text of the message.
   */
  text?: string | null;

  /**
   * The id of the tool call.
   */
  tool_call_id?: string | null;

  /**
   * The list of tool calls requested.
   */
  tool_calls?: Array<MessageUpdateResponse.ToolCall> | null;

  /**
   * The timestamp when the object was last updated.
   */
  updated_at?: string | null;
}

export namespace MessageUpdateResponse {
  export interface ToolCall {
    /**
     * The ID of the tool call
     */
    id: string;

    /**
     * The arguments and name for the function
     */
    function: ToolCall.Function;

    type?: string;
  }

  export namespace ToolCall {
    /**
     * The arguments and name for the function
     */
    export interface Function {
      /**
       * The arguments to pass to the function (JSON dump)
       */
      arguments: string;

      /**
       * The name of the function to call
       */
      name: string;
    }
  }
}

export type MessageListResponse =
  | Array<MessageListResponse.UnionMember0>
  | Array<
      | MessageListResponse.SystemMessageOutput
      | MessageListResponse.UserMessageOutput
      | MessageListResponse.InternalMonologue
      | MessageListResponse.ToolCallMessage
      | MessageListResponse.ToolReturnMessage
      | MessageListResponse.AssistantMessageOutput
    >;

export namespace MessageListResponse {
  /**
   * Letta's internal representation of a message. Includes methods to convert
   * to/from LLM provider formats.
   *
   * Attributes: id (str): The unique identifier of the message. role (MessageRole):
   * The role of the participant. text (str): The text of the message. user_id (str):
   * The unique identifier of the user. agent_id (str): The unique identifier of the
   * agent. model (str): The model used to make the function call. name (str): The
   * name of the participant. created_at (datetime): The time the message was
   * created. tool_calls (List[ToolCall]): The list of tool calls requested.
   * tool_call_id (str): The id of the tool call.
   */
  export interface UnionMember0 {
    /**
     * The role of the participant.
     */
    role: 'assistant' | 'user' | 'tool' | 'function' | 'system';

    /**
     * The human-friendly ID of the Message
     */
    id?: string;

    /**
     * The unique identifier of the agent.
     */
    agent_id?: string | null;

    /**
     * The timestamp when the object was created.
     */
    created_at?: string;

    /**
     * The id of the user that made this object.
     */
    created_by_id?: string | null;

    /**
     * The id of the user that made this object.
     */
    last_updated_by_id?: string | null;

    /**
     * The model used to make the function call.
     */
    model?: string | null;

    /**
     * The name of the participant.
     */
    name?: string | null;

    /**
     * The unique identifier of the organization.
     */
    organization_id?: string | null;

    /**
     * The text of the message.
     */
    text?: string | null;

    /**
     * The id of the tool call.
     */
    tool_call_id?: string | null;

    /**
     * The list of tool calls requested.
     */
    tool_calls?: Array<UnionMember0.ToolCall> | null;

    /**
     * The timestamp when the object was last updated.
     */
    updated_at?: string | null;
  }

  export namespace UnionMember0 {
    export interface ToolCall {
      /**
       * The ID of the tool call
       */
      id: string;

      /**
       * The arguments and name for the function
       */
      function: ToolCall.Function;

      type?: string;
    }

    export namespace ToolCall {
      /**
       * The arguments and name for the function
       */
      export interface Function {
        /**
         * The arguments to pass to the function (JSON dump)
         */
        arguments: string;

        /**
         * The name of the function to call
         */
        name: string;
      }
    }
  }

  /**
   * A message generated by the system. Never streamed back on a response, only used
   * for cursor pagination.
   *
   * Attributes: message (str): The message sent by the system id (str): The ID of
   * the message date (datetime): The date the message was created in ISO format
   */
  export interface SystemMessageOutput {
    id: string;

    date: string;

    message: string;

    message_type?: 'system_message';
  }

  /**
   * A message sent by the user. Never streamed back on a response, only used for
   * cursor pagination.
   *
   * Attributes: message (str): The message sent by the user id (str): The ID of the
   * message date (datetime): The date the message was created in ISO format
   */
  export interface UserMessageOutput {
    id: string;

    date: string;

    message: string;

    message_type?: 'user_message';
  }

  /**
   * Representation of an agent's internal monologue.
   *
   * Attributes: internal_monologue (str): The internal monologue of the agent id
   * (str): The ID of the message date (datetime): The date the message was created
   * in ISO format
   */
  export interface InternalMonologue {
    id: string;

    date: string;

    internal_monologue: string;

    message_type?: 'internal_monologue';
  }

  /**
   * A message representing a request to call a tool (generated by the LLM to trigger
   * tool execution).
   *
   * Attributes: tool_call (Union[ToolCall, ToolCallDelta]): The tool call id (str):
   * The ID of the message date (datetime): The date the message was created in ISO
   * format
   */
  export interface ToolCallMessage {
    id: string;

    date: string;

    tool_call: ToolCallMessage.LettaSchemasLettaMessageToolCall | ToolCallMessage.ToolCallDelta;

    message_type?: 'tool_call_message';
  }

  export namespace ToolCallMessage {
    export interface LettaSchemasLettaMessageToolCall {
      arguments: string;

      name: string;

      tool_call_id: string;
    }

    export interface ToolCallDelta {
      arguments: string | null;

      name: string | null;

      tool_call_id: string | null;
    }
  }

  /**
   * A message representing the return value of a tool call (generated by Letta
   * executing the requested tool).
   *
   * Attributes: tool_return (str): The return value of the tool status
   * (Literal["success", "error"]): The status of the tool call id (str): The ID of
   * the message date (datetime): The date the message was created in ISO format
   * tool_call_id (str): A unique identifier for the tool call that generated this
   * message stdout (Optional[List(str)]): Captured stdout (e.g. prints, logs) from
   * the tool invocation stderr (Optional[List(str)]): Captured stderr from the tool
   * invocation
   */
  export interface ToolReturnMessage {
    id: string;

    date: string;

    status: 'success' | 'error';

    tool_call_id: string;

    tool_return: string;

    message_type?: 'tool_return_message';

    stderr?: Array<string> | null;

    stdout?: Array<string> | null;
  }

  export interface AssistantMessageOutput {
    id: string;

    assistant_message: string;

    date: string;

    message_type?: 'assistant_message';
  }
}

export interface MessageCreateParams {
  /**
   * The messages to be sent to the agent.
   */
  messages: Array<MessageCreateParams.Message>;

  /**
   * The name of the message argument in the designated message tool.
   */
  assistant_message_tool_kwarg?: string;

  /**
   * The name of the designated message tool.
   */
  assistant_message_tool_name?: string;
}

export namespace MessageCreateParams {
  /**
   * Request to create a message
   */
  export interface Message {
    /**
     * The role of the participant.
     */
    role: 'user' | 'system';

    /**
     * The text of the message.
     */
    text: string;

    /**
     * The name of the participant.
     */
    name?: string | null;
  }
}

export interface MessageUpdateParams {
  /**
   * The name of the participant.
   */
  name?: string | null;

  /**
   * The role of the participant.
   */
  role?: 'assistant' | 'user' | 'tool' | 'function' | 'system' | null;

  /**
   * The text of the message.
   */
  text?: string | null;

  /**
   * The id of the tool call.
   */
  tool_call_id?: string | null;

  /**
   * The list of tool calls requested.
   */
  tool_calls?: Array<MessageUpdateParams.ToolCall> | null;
}

export namespace MessageUpdateParams {
  export interface ToolCall {
    /**
     * The ID of the tool call
     */
    id: string;

    /**
     * The arguments and name for the function
     */
    function: ToolCall.Function;

    type?: string;
  }

  export namespace ToolCall {
    /**
     * The arguments and name for the function
     */
    export interface Function {
      /**
       * The arguments to pass to the function (JSON dump)
       */
      arguments: string;

      /**
       * The name of the function to call
       */
      name: string;
    }
  }
}

export interface MessageListParams {
  /**
   * The name of the message argument in the designated message tool.
   */
  assistant_message_tool_kwarg?: string;

  /**
   * The name of the designated message tool.
   */
  assistant_message_tool_name?: string;

  /**
   * Message before which to retrieve the returned messages.
   */
  before?: string | null;

  /**
   * Maximum number of messages to retrieve.
   */
  limit?: number;

  /**
   * If true, returns Message objects. If false, return LettaMessage objects.
   */
  msg_object?: boolean;
}

export declare namespace Messages {
  export {
    type MessageCreateResponse as MessageCreateResponse,
    type MessageUpdateResponse as MessageUpdateResponse,
    type MessageListResponse as MessageListResponse,
    type MessageCreateParams as MessageCreateParams,
    type MessageUpdateParams as MessageUpdateParams,
    type MessageListParams as MessageListParams,
  };
}
