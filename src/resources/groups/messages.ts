// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as ToolsAPI from '../tools';
import * as AgentsAPI from '../agents/agents';
import * as MessagesAPI from '../agents/messages';
import { LettaMessageUnionsArrayPage } from '../agents/messages';
import { APIPromise } from '../../core/api-promise';
import { ArrayPage, type ArrayPageParams, PagePromise } from '../../core/pagination';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class Messages extends APIResource {
  /**
   * Retrieve message history for an agent.
   */
  list(
    groupID: string,
    query: MessageListParams | null | undefined = {},
    options?: RequestOptions,
  ): PagePromise<LettaMessageUnionsArrayPage, MessagesAPI.LettaMessageUnion> {
    return this._client.getAPIList(
      path`/v1/groups/${groupID}/messages`,
      ArrayPage<MessagesAPI.LettaMessageUnion>,
      { query, ...options },
    );
  }

  /**
   * Update the details of a message associated with an agent.
   */
  modify(
    messageID: string,
    params: MessageModifyParams,
    options?: RequestOptions,
  ): APIPromise<MessageModifyResponse> {
    const { group_id, ...body } = params;
    return this._client.patch(path`/v1/groups/${group_id}/messages/${messageID}`, { body, ...options });
  }

  /**
   * Delete the group messages for all agents that are part of the multi-agent group.
   */
  reset(groupID: string, options?: RequestOptions): APIPromise<unknown> {
    return this._client.patch(path`/v1/groups/${groupID}/reset-messages`, options);
  }

  /**
   * Process a user message and return the group's response. This endpoint accepts a
   * message from a user and processes it through through agents in the group based
   * on the specified pattern
   */
  send(
    groupID: string,
    body: MessageSendParams,
    options?: RequestOptions,
  ): APIPromise<MessagesAPI.LettaResponse> {
    return this._client.post(path`/v1/groups/${groupID}/messages`, { body, ...options });
  }

  /**
   * Process a user message and return the group's responses. This endpoint accepts a
   * message from a user and processes it through agents in the group based on the
   * specified pattern. It will stream the steps of the response always, and stream
   * the tokens if 'stream_tokens' is set to True.
   */
  stream(groupID: string, body: MessageStreamParams, options?: RequestOptions): APIPromise<unknown> {
    return this._client.post(path`/v1/groups/${groupID}/messages/stream`, { body, ...options });
  }
}

/**
 * A message generated by the system. Never streamed back on a response, only used
 * for cursor pagination.
 *
 * Args: id (str): The ID of the message date (datetime): The date the message was
 * created in ISO format name (Optional[str]): The name of the sender of the
 * message content (str): The message content sent by the system
 */
export type MessageModifyResponse =
  | MessagesAPI.SystemMessage
  | MessagesAPI.UserMessage
  | MessagesAPI.ReasoningMessage
  | MessagesAPI.HiddenReasoningMessage
  | MessagesAPI.ToolCallMessage
  | ToolsAPI.ToolReturnMessage
  | MessagesAPI.AssistantMessage
  | MessagesAPI.ApprovalRequestMessage
  | MessagesAPI.ApprovalResponseMessage;

export type MessageResetResponse = unknown;

export type MessageStreamResponse = unknown;

export interface MessageListParams extends ArrayPageParams {
  /**
   * @deprecated The name of the message argument.
   */
  assistant_message_tool_kwarg?: string;

  /**
   * @deprecated The name of the designated message tool.
   */
  assistant_message_tool_name?: string;

  /**
   * @deprecated Whether to use assistant messages
   */
  use_assistant_message?: boolean;
}

export type MessageModifyParams =
  | MessageModifyParams.UpdateSystemMessage
  | MessageModifyParams.UpdateUserMessage
  | MessageModifyParams.UpdateReasoningMessage
  | MessageModifyParams.UpdateAssistantMessage;

export declare namespace MessageModifyParams {
  export interface UpdateSystemMessage {
    /**
     * Path param: The ID of the group in the format 'group-<uuid4>'
     */
    group_id: string;

    /**
     * Body param: The message content sent by the system (can be a string or an array
     * of multi-modal content parts)
     */
    content: string;

    /**
     * Body param:
     */
    message_type?: 'system_message';
  }

  export interface UpdateUserMessage {
    /**
     * Path param: The ID of the group in the format 'group-<uuid4>'
     */
    group_id: string;

    /**
     * Body param: The message content sent by the user (can be a string or an array of
     * multi-modal content parts)
     */
    content: Array<MessagesAPI.LettaUserMessageContentUnion> | string;

    /**
     * Body param:
     */
    message_type?: 'user_message';
  }

  export interface UpdateReasoningMessage {
    /**
     * Path param: The ID of the group in the format 'group-<uuid4>'
     */
    group_id: string;

    /**
     * Body param:
     */
    reasoning: string;

    /**
     * Body param:
     */
    message_type?: 'reasoning_message';
  }

  export interface UpdateAssistantMessage {
    /**
     * Path param: The ID of the group in the format 'group-<uuid4>'
     */
    group_id: string;

    /**
     * Body param: The message content sent by the assistant (can be a string or an
     * array of content parts)
     */
    content: Array<MessagesAPI.LettaAssistantMessageContentUnion> | string;

    /**
     * Body param:
     */
    message_type?: 'assistant_message';
  }
}

export interface MessageSendParams {
  /**
   * The messages to be sent to the agent.
   */
  messages: Array<AgentsAPI.MessageCreate | MessagesAPI.ApprovalCreate>;

  /**
   * @deprecated The name of the message argument in the designated message tool.
   * Still supported for legacy agent types, but deprecated for letta_v1_agent
   * onward.
   */
  assistant_message_tool_kwarg?: string;

  /**
   * @deprecated The name of the designated message tool. Still supported for legacy
   * agent types, but deprecated for letta_v1_agent onward.
   */
  assistant_message_tool_name?: string;

  /**
   * @deprecated If set to True, enables reasoning before responses or tool calls
   * from the agent.
   */
  enable_thinking?: string;

  /**
   * Only return specified message types in the response. If `None` (default) returns
   * all messages.
   */
  include_return_message_types?: Array<MessagesAPI.MessageType> | null;

  /**
   * Maximum number of steps the agent should take to process the request.
   */
  max_steps?: number;

  /**
   * @deprecated Whether the server should parse specific tool call arguments
   * (default `send_message`) as `AssistantMessage` objects. Still supported for
   * legacy agent types, but deprecated for letta_v1_agent onward.
   */
  use_assistant_message?: boolean;
}

export interface MessageStreamParams {
  /**
   * The messages to be sent to the agent.
   */
  messages: Array<AgentsAPI.MessageCreate | MessagesAPI.ApprovalCreate>;

  /**
   * @deprecated The name of the message argument in the designated message tool.
   * Still supported for legacy agent types, but deprecated for letta_v1_agent
   * onward.
   */
  assistant_message_tool_kwarg?: string;

  /**
   * @deprecated The name of the designated message tool. Still supported for legacy
   * agent types, but deprecated for letta_v1_agent onward.
   */
  assistant_message_tool_name?: string;

  /**
   * Whether to process the request in the background.
   */
  background?: boolean;

  /**
   * @deprecated If set to True, enables reasoning before responses or tool calls
   * from the agent.
   */
  enable_thinking?: string;

  /**
   * Whether to include periodic keepalive ping messages in the stream to prevent
   * connection timeouts.
   */
  include_pings?: boolean;

  /**
   * Only return specified message types in the response. If `None` (default) returns
   * all messages.
   */
  include_return_message_types?: Array<MessagesAPI.MessageType> | null;

  /**
   * Maximum number of steps the agent should take to process the request.
   */
  max_steps?: number;

  /**
   * Flag to determine if individual tokens should be streamed, rather than streaming
   * per step.
   */
  stream_tokens?: boolean;

  /**
   * @deprecated Whether the server should parse specific tool call arguments
   * (default `send_message`) as `AssistantMessage` objects. Still supported for
   * legacy agent types, but deprecated for letta_v1_agent onward.
   */
  use_assistant_message?: boolean;
}

export declare namespace Messages {
  export {
    type MessageModifyResponse as MessageModifyResponse,
    type MessageResetResponse as MessageResetResponse,
    type MessageStreamResponse as MessageStreamResponse,
    type MessageListParams as MessageListParams,
    type MessageModifyParams as MessageModifyParams,
    type MessageSendParams as MessageSendParams,
    type MessageStreamParams as MessageStreamParams,
  };
}

export { type LettaMessageUnionsArrayPage };
