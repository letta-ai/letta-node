// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.

import { APIResource } from '../../core/resource';
import * as MessagesAPI from '../agents/messages';
import * as RunsAPI from '../runs/runs';
import * as FeedbackAPI from './feedback';
import { Feedback, FeedbackCreateParams } from './feedback';
import * as StepsMessagesAPI from './messages';
import { MessageListParams, MessageListResponse, Messages } from './messages';
import * as MetricsAPI from './metrics';
import { MetricRetrieveResponse, Metrics } from './metrics';
import * as TraceAPI from './trace';
import { Trace } from './trace';
import { APIPromise } from '../../core/api-promise';
import { buildHeaders } from '../../internal/headers';
import { RequestOptions } from '../../internal/request-options';
import { path } from '../../internal/utils/path';

export class Steps extends APIResource {
  metrics: MetricsAPI.Metrics = new MetricsAPI.Metrics(this._client);
  trace: TraceAPI.Trace = new TraceAPI.Trace(this._client);
  feedback: FeedbackAPI.Feedback = new FeedbackAPI.Feedback(this._client);
  messages: StepsMessagesAPI.Messages = new StepsMessagesAPI.Messages(this._client);

  /**
   * Get a step by ID.
   */
  retrieve(stepID: string, options?: RequestOptions): APIPromise<Step> {
    return this._client.get(path`/v1/steps/${stepID}`, options);
  }

  /**
   * List steps with optional pagination and date filters.
   */
  list(
    params: StepListParams | null | undefined = {},
    options?: RequestOptions,
  ): APIPromise<StepListResponse> {
    const { 'X-Project': xProject, ...query } = params ?? {};
    return this._client.get('/v1/steps/', {
      query,
      ...options,
      headers: buildHeaders([
        { ...(xProject != null ? { 'X-Project': xProject } : undefined) },
        options?.headers,
      ]),
    });
  }
}

/**
 * Letta's internal representation of a provider trace.
 *
 * Attributes: id (str): The unique identifier of the provider trace. request_json
 * (Dict[str, Any]): JSON content of the provider request. response_json (Dict[str,
 * Any]): JSON content of the provider response. step_id (str): ID of the step that
 * this trace is associated with. organization_id (str): The unique identifier of
 * the organization. created_at (datetime): The timestamp when the object was
 * created.
 */
export interface ProviderTrace {
  /**
   * JSON content of the provider request
   */
  request_json: { [key: string]: unknown };

  /**
   * JSON content of the provider response
   */
  response_json: { [key: string]: unknown };

  /**
   * The human-friendly ID of the Provider_trace
   */
  id?: string;

  /**
   * The timestamp when the object was created.
   */
  created_at?: string;

  /**
   * The id of the user that made this object.
   */
  created_by_id?: string | null;

  /**
   * The id of the user that made this object.
   */
  last_updated_by_id?: string | null;

  /**
   * ID of the step that this trace is associated with
   */
  step_id?: string | null;

  /**
   * The timestamp when the object was last updated.
   */
  updated_at?: string | null;
}

export interface Step {
  /**
   * The id of the step. Assigned by the database.
   */
  id: string;

  /**
   * The ID of the agent that performed the step.
   */
  agent_id?: string | null;

  /**
   * The number of tokens generated by the agent during this step.
   */
  completion_tokens?: number | null;

  /**
   * Metadata for the agent.
   */
  completion_tokens_details?: { [key: string]: unknown } | null;

  /**
   * The context window limit configured for this step.
   */
  context_window_limit?: number | null;

  /**
   * Error details including message, traceback, and additional context
   */
  error_data?: { [key: string]: unknown } | null;

  /**
   * The type/class of the error that occurred
   */
  error_type?: string | null;

  /**
   * The feedback for this step. Must be either 'positive' or 'negative'.
   */
  feedback?: 'positive' | 'negative' | null;

  /**
   * @deprecated The messages generated during this step. Deprecated: use
   * `GET /v1/steps/{step_id}/messages` endpoint instead
   */
  messages?: Array<MessagesAPI.Message>;

  /**
   * The name of the model used for this step.
   */
  model?: string | null;

  /**
   * The model endpoint url used for this step.
   */
  model_endpoint?: string | null;

  /**
   * The surface that this agent step was initiated from.
   */
  origin?: string | null;

  /**
   * The project that the agent that executed this step belongs to (cloud only).
   */
  project_id?: string | null;

  /**
   * The number of tokens in the prompt during this step.
   */
  prompt_tokens?: number | null;

  /**
   * The category of the provider used for this step.
   */
  provider_category?: string | null;

  /**
   * The unique identifier of the provider that was configured for this step
   */
  provider_id?: string | null;

  /**
   * The name of the provider used for this step.
   */
  provider_name?: string | null;

  /**
   * The unique identifier of the run that this step belongs to. Only included for
   * async calls.
   */
  run_id?: string | null;

  /**
   * Status of a step execution
   */
  status?: 'pending' | 'success' | 'failed' | 'cancelled' | null;

  /**
   * The stop reason associated with the step.
   */
  stop_reason?: RunsAPI.StopReasonType | null;

  /**
   * Metadata tags.
   */
  tags?: Array<string>;

  /**
   * The unique identifier of the transaction that processed this step.
   */
  tid?: string | null;

  /**
   * The total number of tokens processed by the agent during this step.
   */
  total_tokens?: number | null;

  /**
   * The trace id of the agent step.
   */
  trace_id?: string | null;
}

export type StepListResponse = Array<Step>;

export interface StepListParams {
  /**
   * Query param: Return steps after this step ID
   */
  after?: string | null;

  /**
   * Query param: Filter by the ID of the agent that performed the step
   */
  agent_id?: string | null;

  /**
   * Query param: Return steps before this step ID
   */
  before?: string | null;

  /**
   * Query param: Return steps before this ISO datetime (e.g.
   * "2025-01-29T15:01:19-08:00")
   */
  end_date?: string | null;

  /**
   * Query param: Filter by feedback
   */
  feedback?: 'positive' | 'negative' | null;

  /**
   * Query param: Filter by whether steps have feedback (true) or not (false)
   */
  has_feedback?: boolean | null;

  /**
   * Query param: Maximum number of steps to return
   */
  limit?: number | null;

  /**
   * Query param: Filter by the name of the model used for the step
   */
  model?: string | null;

  /**
   * Query param: Sort order for steps by creation time. 'asc' for oldest first,
   * 'desc' for newest first
   */
  order?: 'asc' | 'desc';

  /**
   * Query param: Field to sort by
   */
  order_by?: 'created_at';

  /**
   * Query param: Filter by the project ID that is associated with the step (cloud
   * only).
   */
  project_id?: string | null;

  /**
   * Query param: Return steps after this ISO datetime (e.g.
   * "2025-01-29T15:01:19-08:00")
   */
  start_date?: string | null;

  /**
   * Query param: Filter by tags
   */
  tags?: Array<string> | null;

  /**
   * Query param: Filter by trace ids returned by the server
   */
  trace_ids?: Array<string> | null;

  /**
   * Header param: Filter by project slug to associate with the group (cloud only).
   */
  'X-Project'?: string;
}

Steps.Metrics = Metrics;
Steps.Trace = Trace;
Steps.Feedback = Feedback;
Steps.Messages = Messages;

export declare namespace Steps {
  export {
    type ProviderTrace as ProviderTrace,
    type Step as Step,
    type StepListResponse as StepListResponse,
    type StepListParams as StepListParams,
  };

  export { Metrics as Metrics, type MetricRetrieveResponse as MetricRetrieveResponse };

  export { Trace as Trace };

  export { Feedback as Feedback, type FeedbackCreateParams as FeedbackCreateParams };

  export {
    Messages as Messages,
    type MessageListResponse as MessageListResponse,
    type MessageListParams as MessageListParams,
  };
}
