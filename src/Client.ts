/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Tools } from "./api/resources/tools/client/Client.js";
import { Sources } from "./api/resources/sources/client/Client.js";
import { Folders } from "./api/resources/folders/client/Client.js";
import { Agents } from "./api/resources/agents/client/Client.js";
import { Groups } from "./api/resources/groups/client/Client.js";
import { Identities } from "./api/resources/identities/client/Client.js";
import { Models } from "./api/resources/models/client/Client.js";
import { EmbeddingModels } from "./api/resources/embeddingModels/client/Client.js";
import { Blocks } from "./api/resources/blocks/client/Client.js";
import { Jobs } from "./api/resources/jobs/client/Client.js";
import { Health } from "./api/resources/health/client/Client.js";
import { Providers } from "./api/resources/providers/client/Client.js";
import { Runs } from "./api/resources/runs/client/Client.js";
import { Steps } from "./api/resources/steps/client/Client.js";
import { Tags } from "./api/resources/tags/client/Client.js";
import { Telemetry } from "./api/resources/telemetry/client/Client.js";
import { Batches } from "./api/resources/batches/client/Client.js";
import { Messages } from "./api/resources/messages/client/Client.js";
import { Voice } from "./api/resources/voice/client/Client.js";
import { Templates } from "./api/resources/templates/client/Client.js";
import { ClientSideAccessTokens } from "./api/resources/clientSideAccessTokens/client/Client.js";
import { Projects } from "./api/resources/projects/client/Client.js";

export declare namespace LettaClient {
    export interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class LettaClient {
    protected readonly _options: LettaClient.Options;
    protected _tools: Tools | undefined;
    protected _sources: Sources | undefined;
    protected _folders: Folders | undefined;
    protected _agents: Agents | undefined;
    protected _groups: Groups | undefined;
    protected _identities: Identities | undefined;
    protected _models: Models | undefined;
    protected _embeddingModels: EmbeddingModels | undefined;
    protected _blocks: Blocks | undefined;
    protected _jobs: Jobs | undefined;
    protected _health: Health | undefined;
    protected _providers: Providers | undefined;
    protected _runs: Runs | undefined;
    protected _steps: Steps | undefined;
    protected _tags: Tags | undefined;
    protected _telemetry: Telemetry | undefined;
    protected _batches: Batches | undefined;
    protected _messages: Messages | undefined;
    protected _voice: Voice | undefined;
    protected _templates: Templates | undefined;
    protected _clientSideAccessTokens: ClientSideAccessTokens | undefined;
    protected _projects: Projects | undefined;

    constructor(_options: LettaClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Project": _options?.project,
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "@letta-ai/letta-client",
                    "X-Fern-SDK-Version": "0.1.171",
                    "User-Agent": "@letta-ai/letta-client/0.1.171",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    public get sources(): Sources {
        return (this._sources ??= new Sources(this._options));
    }

    public get folders(): Folders {
        return (this._folders ??= new Folders(this._options));
    }

    public get agents(): Agents {
        return (this._agents ??= new Agents(this._options));
    }

    public get groups(): Groups {
        return (this._groups ??= new Groups(this._options));
    }

    public get identities(): Identities {
        return (this._identities ??= new Identities(this._options));
    }

    public get models(): Models {
        return (this._models ??= new Models(this._options));
    }

    public get embeddingModels(): EmbeddingModels {
        return (this._embeddingModels ??= new EmbeddingModels(this._options));
    }

    public get blocks(): Blocks {
        return (this._blocks ??= new Blocks(this._options));
    }

    public get jobs(): Jobs {
        return (this._jobs ??= new Jobs(this._options));
    }

    public get health(): Health {
        return (this._health ??= new Health(this._options));
    }

    public get providers(): Providers {
        return (this._providers ??= new Providers(this._options));
    }

    public get runs(): Runs {
        return (this._runs ??= new Runs(this._options));
    }

    public get steps(): Steps {
        return (this._steps ??= new Steps(this._options));
    }

    public get tags(): Tags {
        return (this._tags ??= new Tags(this._options));
    }

    public get telemetry(): Telemetry {
        return (this._telemetry ??= new Telemetry(this._options));
    }

    public get batches(): Batches {
        return (this._batches ??= new Batches(this._options));
    }

    public get messages(): Messages {
        return (this._messages ??= new Messages(this._options));
    }

    public get voice(): Voice {
        return (this._voice ??= new Voice(this._options));
    }

    public get templates(): Templates {
        return (this._templates ??= new Templates(this._options));
    }

    public get clientSideAccessTokens(): ClientSideAccessTokens {
        return (this._clientSideAccessTokens ??= new ClientSideAccessTokens(this._options));
    }

    public get projects(): Projects {
        return (this._projects ??= new Projects(this._options));
    }
}
