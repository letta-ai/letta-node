/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Letta from "../index.js";

/**
 * Representation of an agent's state. This is the state of the agent at a given time, and is persisted in the DB backend. The state has all the information needed to recreate a persisted agent.
 *
 * Parameters:
 *     id (str): The unique identifier of the agent.
 *     name (str): The name of the agent (must be unique to the user).
 *     created_at (datetime): The datetime the agent was created.
 *     message_ids (List[str]): The ids of the messages in the agent's in-context memory.
 *     memory (Memory): The in-context memory of the agent.
 *     tools (List[str]): The tools used by the agent. This includes any memory editing functions specified in `memory`.
 *     system (str): The system prompt used by the agent.
 *     llm_config (LLMConfig): The LLM configuration used by the agent.
 *     embedding_config (EmbeddingConfig): The embedding configuration used by the agent.
 */
export interface AgentState {
    /** The id of the user that made this object. */
    created_by_id?: string;
    /** The id of the user that made this object. */
    last_updated_by_id?: string;
    /** The timestamp when the object was created. */
    created_at?: string;
    /** The timestamp when the object was last updated. */
    updated_at?: string;
    /** The id of the agent. Assigned by the database. */
    id: string;
    /** The name of the agent. */
    name: string;
    /** The list of tool rules. */
    tool_rules?: AgentState.ToolRules.Item[];
    /** The ids of the messages in the agent's in-context memory. */
    message_ids?: string[];
    /** The system prompt used by the agent. */
    system: string;
    /** The type of agent. */
    agent_type: Letta.AgentType;
    /** The LLM configuration used by the agent. */
    llm_config: Letta.LlmConfig;
    /** The embedding configuration used by the agent. */
    embedding_config: Letta.EmbeddingConfig;
    /** The response format used by the agent when returning from `send_message`. */
    response_format?: AgentState.ResponseFormat;
    /** The description of the agent. */
    description?: string;
    /** The metadata of the agent. */
    metadata?: Record<string, unknown>;
    /** The in-context memory of the agent. */
    memory: Letta.Memory;
    /** The tools used by the agent. */
    tools: Letta.Tool[];
    /** The sources used by the agent. */
    sources: Letta.Source[];
    /** The tags associated with the agent. */
    tags: string[];
    /** The environment variables for tool execution specific to this agent. */
    tool_exec_environment_variables?: Letta.AgentEnvironmentVariable[];
    /** The id of the project the agent belongs to. */
    project_id?: string;
    /** The id of the template the agent belongs to. */
    template_id?: string;
    /** The base template id of the agent. */
    base_template_id?: string;
    /** The ids of the identities associated with this agent. */
    identity_ids?: string[];
    /** If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case. */
    message_buffer_autoclear?: boolean;
    /** If set to True, memory management will move to a background agent thread. */
    enable_sleeptime?: boolean;
    /** The multi-agent group that this agent manages */
    multi_agent_group?: Letta.Group;
    /** The timestamp when the agent last completed a run. */
    last_run_completion?: string;
    /** The duration in milliseconds of the agent's last run. */
    last_run_duration_ms?: number;
    /** The timezone of the agent (IANA format). */
    timezone?: string;
    /** Maximum number of files that can be open at once for this agent. Setting this too high may exceed the context window, which will break the agent. */
    max_files_open?: number;
    /** The per-file view window character limit for this agent. Setting this too high may exceed the context window, which will break the agent. */
    per_file_view_window_char_limit?: number;
}

export namespace AgentState {
    export type ToolRules = ToolRules.Item[];

    export namespace ToolRules {
        export type Item =
            | Letta.ConditionalToolRule
            | Letta.ChildToolRule
            | Letta.ContinueToolRule
            | Letta.TerminalToolRule
            | Letta.MaxCountPerStepToolRule
            | Letta.ParentToolRule
            | Letta.RequiredBeforeExitToolRule
            | Letta.InitToolRule;
    }

    export type ResponseFormat =
        | Letta.JsonObjectResponseFormat
        | Letta.JsonSchemaResponseFormat
        | Letta.TextResponseFormat;
}
