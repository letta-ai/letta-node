/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Letta from "../index.js";

export interface CompletionCreateParamsNonStreaming {
    messages: CompletionCreateParamsNonStreaming.Messages.Item[];
    model: CompletionCreateParamsNonStreaming.Model;
    audio?: Letta.ChatCompletionAudioParam;
    frequency_penalty?: number;
    function_call?: CompletionCreateParamsNonStreaming.FunctionCall;
    functions?: Letta.OpenaiTypesChatCompletionCreateParamsFunction[];
    logit_bias?: Record<string, number | undefined>;
    logprobs?: boolean;
    max_completion_tokens?: number;
    max_tokens?: number;
    metadata?: Record<string, string | undefined>;
    modalities?: CompletionCreateParamsNonStreaming.Modalities.Item[];
    n?: number;
    parallel_tool_calls?: boolean;
    prediction?: Letta.ChatCompletionPredictionContentParam;
    presence_penalty?: number;
    reasoning_effort?: CompletionCreateParamsNonStreaming.ReasoningEffort;
    response_format?: CompletionCreateParamsNonStreaming.ResponseFormat;
    seed?: number;
    service_tier?: CompletionCreateParamsNonStreaming.ServiceTier;
    stop?: CompletionCreateParamsNonStreaming.Stop;
    store?: boolean;
    stream_options?: Letta.ChatCompletionStreamOptionsParam;
    temperature?: number;
    tool_choice?: CompletionCreateParamsNonStreaming.ToolChoice;
    tools?: Letta.ChatCompletionToolParam[];
    top_logprobs?: number;
    top_p?: number;
    user?: string;
    web_search_options?: Letta.WebSearchOptions;
    stream?: boolean;
}

export namespace CompletionCreateParamsNonStreaming {
    export type Messages = Messages.Item[];

    export namespace Messages {
        export type Item =
            | Letta.ChatCompletionDeveloperMessageParam
            | Letta.ChatCompletionSystemMessageParam
            | Letta.ChatCompletionUserMessageParam
            | Letta.ChatCompletionAssistantMessageParam
            | Letta.ChatCompletionToolMessageParam
            | Letta.ChatCompletionFunctionMessageParam;
    }

    export type Model =
        | string
        | "gpt-4.1"
        | "gpt-4.1-mini"
        | "gpt-4.1-nano"
        | "gpt-4.1-2025-04-14"
        | "gpt-4.1-mini-2025-04-14"
        | "gpt-4.1-nano-2025-04-14"
        | "o4-mini"
        | "o4-mini-2025-04-16"
        | "o3"
        | "o3-2025-04-16"
        | "o3-mini"
        | "o3-mini-2025-01-31"
        | "o1"
        | "o1-2024-12-17"
        | "o1-preview"
        | "o1-preview-2024-09-12"
        | "o1-mini"
        | "o1-mini-2024-09-12"
        | "gpt-4o"
        | "gpt-4o-2024-11-20"
        | "gpt-4o-2024-08-06"
        | "gpt-4o-2024-05-13"
        | "gpt-4o-audio-preview"
        | "gpt-4o-audio-preview-2024-10-01"
        | "gpt-4o-audio-preview-2024-12-17"
        | "gpt-4o-audio-preview-2025-06-03"
        | "gpt-4o-mini-audio-preview"
        | "gpt-4o-mini-audio-preview-2024-12-17"
        | "gpt-4o-search-preview"
        | "gpt-4o-mini-search-preview"
        | "gpt-4o-search-preview-2025-03-11"
        | "gpt-4o-mini-search-preview-2025-03-11"
        | "chatgpt-4o-latest"
        | "codex-mini-latest"
        | "gpt-4o-mini"
        | "gpt-4o-mini-2024-07-18"
        | "gpt-4-turbo"
        | "gpt-4-turbo-2024-04-09"
        | "gpt-4-0125-preview"
        | "gpt-4-turbo-preview"
        | "gpt-4-1106-preview"
        | "gpt-4-vision-preview"
        | "gpt-4"
        | "gpt-4-0314"
        | "gpt-4-0613"
        | "gpt-4-32k"
        | "gpt-4-32k-0314"
        | "gpt-4-32k-0613"
        | "gpt-3.5-turbo"
        | "gpt-3.5-turbo-16k"
        | "gpt-3.5-turbo-0301"
        | "gpt-3.5-turbo-0613"
        | "gpt-3.5-turbo-1106"
        | "gpt-3.5-turbo-0125"
        | "gpt-3.5-turbo-16k-0613";
    export type FunctionCall = "none" | "auto" | Letta.ChatCompletionFunctionCallOptionParam;
    export type Modalities = Modalities.Item[];

    export namespace Modalities {
        export type Item = "text" | "audio";
        export const Item = {
            Text: "text",
            Audio: "audio",
        } as const;
    }

    export type ReasoningEffort = "low" | "medium" | "high";
    export const ReasoningEffort = {
        Low: "low",
        Medium: "medium",
        High: "high",
    } as const;
    export type ResponseFormat =
        | Letta.ResponseFormatText
        | Letta.ResponseFormatJsonSchema
        | Letta.ResponseFormatJsonObject;
    export type ServiceTier = "auto" | "default" | "flex" | "scale" | "priority";
    export const ServiceTier = {
        Auto: "auto",
        Default: "default",
        Flex: "flex",
        Scale: "scale",
        Priority: "priority",
    } as const;
    export type Stop = string | string[];
    export type ToolChoice = "none" | "auto" | "required" | Letta.ChatCompletionNamedToolChoiceParam;
}
