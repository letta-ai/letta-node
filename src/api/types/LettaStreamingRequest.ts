/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Letta from "../index.js";

export interface LettaStreamingRequest {
    /** The messages to be sent to the agent. */
    messages: Letta.MessageCreate[];
    /** Maximum number of steps the agent should take to process the request. */
    max_steps?: number;
    /** Whether the server should parse specific tool call arguments (default `send_message`) as `AssistantMessage` objects. */
    use_assistant_message?: boolean;
    /** The name of the designated message tool. */
    assistant_message_tool_name?: string;
    /** The name of the message argument in the designated message tool. */
    assistant_message_tool_kwarg?: string;
    /** Only return specified message types in the response. If `None` (default) returns all messages. */
    include_return_message_types?: Letta.MessageType[];
    /** If set to True, enables reasoning before responses or tool calls from the agent. */
    enable_thinking?: string;
    /** Flag to determine if individual tokens should be streamed. Set to True for token streaming (requires stream_steps = True). */
    stream_tokens?: boolean;
}
