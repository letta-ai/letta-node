/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import urlJoin from "url-join";
import * as errors from "../../../../errors/index";
import * as fs from "fs";
import { Blob } from "buffer";

export declare namespace Sources {
    interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }

    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class Sources {
    constructor(protected readonly _options: Sources.Options) {}

    /**
     * Get all sources
     *
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.get("source_id")
     */
    public get(sourceId: string, requestOptions?: Sources.RequestOptions): core.APIPromise<Letta.Source> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}`
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Source,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling GET /v1/sources/{source_id}."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Delete a data source.
     *
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.delete("source_id")
     */
    public delete(sourceId: string, requestOptions?: Sources.RequestOptions): core.APIPromise<unknown> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}`
                    ),
                    method: "DELETE",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling DELETE /v1/sources/{source_id}."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Update the name or documentation of an existing data source.
     *
     * @param {string} sourceId
     * @param {Letta.SourceUpdate} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.update("source_id")
     */
    public update(
        sourceId: string,
        request: Letta.SourceUpdate = {},
        requestOptions?: Sources.RequestOptions
    ): core.APIPromise<Letta.Source> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}`
                    ),
                    method: "PATCH",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Source,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling PATCH /v1/sources/{source_id}."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Get a source by name
     *
     * @param {string} sourceName
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.getIdByName("source_name")
     */
    public getIdByName(sourceName: string, requestOptions?: Sources.RequestOptions): core.APIPromise<string> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/name/${encodeURIComponent(sourceName)}`
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as string,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling GET /v1/sources/name/{source_name}."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * List all data sources created by a user.
     *
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.list()
     */
    public list(requestOptions?: Sources.RequestOptions): core.APIPromise<Letta.Source[]> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        "v1/sources/"
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Source[],
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError("Timeout exceeded when calling GET /v1/sources/.");
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Create a new data source.
     *
     * @param {Letta.SourceCreate} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.create({
     *         name: "name"
     *     })
     */
    public create(request: Letta.SourceCreate, requestOptions?: Sources.RequestOptions): core.APIPromise<Letta.Source> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        "v1/sources/"
                    ),
                    method: "POST",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    body: request,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Source,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError("Timeout exceeded when calling POST /v1/sources/.");
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Attach a data source to an existing agent.
     *
     * @param {string} sourceId
     * @param {Letta.SourcesAttachRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.attach("source_id", {
     *         agent_id: "agent_id"
     *     })
     */
    public attach(
        sourceId: string,
        request: Letta.SourcesAttachRequest,
        requestOptions?: Sources.RequestOptions
    ): core.APIPromise<Letta.Source> {
        return core.APIPromise.from(
            (async () => {
                const { agent_id: agentId } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                _queryParams["agent_id"] = agentId;
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}/attach`
                    ),
                    method: "POST",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Source,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling POST /v1/sources/{source_id}/attach."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Detach a data source from an existing agent.
     *
     * @param {string} sourceId
     * @param {Letta.SourcesDetachRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.detach("source_id", {
     *         agent_id: "agent_id"
     *     })
     */
    public detach(
        sourceId: string,
        request: Letta.SourcesDetachRequest,
        requestOptions?: Sources.RequestOptions
    ): core.APIPromise<Letta.Source> {
        return core.APIPromise.from(
            (async () => {
                const { agent_id: agentId } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                _queryParams["agent_id"] = agentId;
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}/detach`
                    ),
                    method: "POST",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Source,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling POST /v1/sources/{source_id}/detach."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Upload a file to a data source.
     *
     * @param {File | fs.ReadStream | Blob} file
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.uploadFile(fs.createReadStream("/path/to/your/file"), "source_id")
     */
    public uploadFile(
        file: File | fs.ReadStream | Blob,
        sourceId: string,
        requestOptions?: Sources.RequestOptions
    ): core.APIPromise<Letta.Job> {
        return core.APIPromise.from(
            (async () => {
                const _request = await core.newFormData();
                await _request.appendFile("file", file);
                const _maybeEncodedRequest = await _request.getRequest();
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}/upload`
                    ),
                    method: "POST",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ..._maybeEncodedRequest.headers,
                        ...requestOptions?.headers,
                    },
                    requestType: "file",
                    duplex: _maybeEncodedRequest.duplex,
                    body: _maybeEncodedRequest.body,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Job,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling POST /v1/sources/{source_id}/upload."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * List all passages associated with a data source.
     *
     * @param {string} sourceId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.listPassages("source_id")
     */
    public listPassages(sourceId: string, requestOptions?: Sources.RequestOptions): core.APIPromise<Letta.Passage[]> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}/passages`
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.Passage[],
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling GET /v1/sources/{source_id}/passages."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * List paginated files associated with a data source.
     *
     * @param {string} sourceId
     * @param {Letta.SourcesListFilesRequest} request
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.listFiles("source_id")
     */
    public listFiles(
        sourceId: string,
        request: Letta.SourcesListFilesRequest = {},
        requestOptions?: Sources.RequestOptions
    ): core.APIPromise<Letta.FileMetadata[]> {
        return core.APIPromise.from(
            (async () => {
                const { limit, cursor } = request;
                const _queryParams: Record<string, string | string[] | object | object[]> = {};
                if (limit != null) {
                    _queryParams["limit"] = limit.toString();
                }
                if (cursor != null) {
                    _queryParams["cursor"] = cursor;
                }
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}/files`
                    ),
                    method: "GET",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    queryParameters: _queryParams,
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: _response.body as Letta.FileMetadata[],
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling GET /v1/sources/{source_id}/files."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    /**
     * Delete a data source.
     *
     * @param {string} sourceId
     * @param {string} fileId
     * @param {Sources.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.sources.deleteFile("source_id", "file_id")
     */
    public deleteFile(
        sourceId: string,
        fileId: string,
        requestOptions?: Sources.RequestOptions
    ): core.APIPromise<void> {
        return core.APIPromise.from(
            (async () => {
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: urlJoin(
                        (await core.Supplier.get(this._options.environment)) ?? environments.LettaEnvironment.Default,
                        `v1/sources/${encodeURIComponent(sourceId)}/${encodeURIComponent(fileId)}`
                    ),
                    method: "DELETE",
                    headers: {
                        Authorization: await this._getAuthorizationHeader(),
                        "X-Fern-Language": "JavaScript",
                        "X-Fern-SDK-Name": "letta",
                        "X-Fern-SDK-Version": "0.5.3",
                        "User-Agent": "letta/0.5.3",
                        "X-Fern-Runtime": core.RUNTIME.type,
                        "X-Fern-Runtime-Version": core.RUNTIME.version,
                        ...requestOptions?.headers,
                    },
                    contentType: "application/json",
                    requestType: "json",
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        ok: _response.ok,
                        body: undefined,
                        headers: _response.headers,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 422:
                            throw new Letta.UnprocessableEntityError(_response.error.body as Letta.HttpValidationError);
                        default:
                            throw new errors.LettaError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.LettaError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.LettaTimeoutError(
                            "Timeout exceeded when calling DELETE /v1/sources/{source_id}/{file_id}."
                        );
                    case "unknown":
                        throw new errors.LettaError({
                            message: _response.error.errorMessage,
                        });
                }
            })()
        );
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
