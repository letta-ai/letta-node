/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Letta from "../../../index";
import urlJoin from "url-join";
import * as serializers from "../../../../serialization/index";
import * as errors from "../../../../errors/index";

export declare namespace ClientSideAccessTokens {
    export interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string>;
    }
}

export class ClientSideAccessTokens {
    constructor(protected readonly _options: ClientSideAccessTokens.Options = {}) {}

    /**
     * List all client side access tokens for the current account. This is only available for cloud users.
     *
     * @param {Letta.ClientSideAccessTokensListClientSideAccessTokensRequest} request
     * @param {ClientSideAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.clientSideAccessTokens.clientSideAccessTokensListClientSideAccessTokens()
     */
    public clientSideAccessTokensListClientSideAccessTokens(
        request: Letta.ClientSideAccessTokensListClientSideAccessTokensRequest = {},
        requestOptions?: ClientSideAccessTokens.RequestOptions,
    ): core.HttpResponsePromise<Letta.ClientSideAccessTokensListClientSideAccessTokensResponse> {
        return core.HttpResponsePromise.fromPromise(
            this.__clientSideAccessTokensListClientSideAccessTokens(request, requestOptions),
        );
    }

    private async __clientSideAccessTokensListClientSideAccessTokens(
        request: Letta.ClientSideAccessTokensListClientSideAccessTokensRequest = {},
        requestOptions?: ClientSideAccessTokens.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.ClientSideAccessTokensListClientSideAccessTokensResponse>> {
        const { agentId, offset, limit } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (agentId != null) {
            _queryParams["agentId"] = agentId;
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/client-side-access-tokens",
            ),
            method: "GET",
            headers: {
                "X-Project":
                    (await core.Supplier.get(this._options.project)) != null
                        ? await core.Supplier.get(this._options.project)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@letta-ai/letta-client",
                "X-Fern-SDK-Version": "0.1.199",
                "User-Agent": "@letta-ai/letta-client/0.1.199",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ClientSideAccessTokensListClientSideAccessTokensResponse.parseOrThrow(
                    _response.body,
                    {
                        unrecognizedObjectKeys: "passthrough",
                        allowUnrecognizedUnionMembers: true,
                        allowUnrecognizedEnumValues: true,
                        skipValidation: true,
                        breadcrumbsPrefix: ["response"],
                    },
                ),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Letta.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling GET /v1/client-side-access-tokens.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new client side access token with the specified configuration.
     *
     * @param {Letta.ClientSideAccessTokensCreateRequest} request
     * @param {ClientSideAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.clientSideAccessTokens.create({
     *         policy: [{
     *                 type: "agent",
     *                 id: "id",
     *                 access: ["read_messages"]
     *             }],
     *         hostname: "hostname"
     *     })
     */
    public create(
        request: Letta.ClientSideAccessTokensCreateRequest,
        requestOptions?: ClientSideAccessTokens.RequestOptions,
    ): core.HttpResponsePromise<Letta.ClientSideAccessTokensCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Letta.ClientSideAccessTokensCreateRequest,
        requestOptions?: ClientSideAccessTokens.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.ClientSideAccessTokensCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/client-side-access-tokens",
            ),
            method: "POST",
            headers: {
                "X-Project":
                    (await core.Supplier.get(this._options.project)) != null
                        ? await core.Supplier.get(this._options.project)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@letta-ai/letta-client",
                "X-Fern-SDK-Version": "0.1.199",
                "User-Agent": "@letta-ai/letta-client/0.1.199",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: serializers.ClientSideAccessTokensCreateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.ClientSideAccessTokensCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Letta.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling POST /v1/client-side-access-tokens.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a client side access token.
     *
     * @param {string} token - The access token to delete
     * @param {unknown} request
     * @param {ClientSideAccessTokens.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.BadRequestError}
     *
     * @example
     *     await client.clientSideAccessTokens.delete("token", {
     *         "key": "value"
     *     })
     */
    public delete(
        token: string,
        request?: unknown,
        requestOptions?: ClientSideAccessTokens.RequestOptions,
    ): core.HttpResponsePromise<unknown> {
        return core.HttpResponsePromise.fromPromise(this.__delete(token, request, requestOptions));
    }

    private async __delete(
        token: string,
        request?: unknown,
        requestOptions?: ClientSideAccessTokens.RequestOptions,
    ): Promise<core.WithRawResponse<unknown>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: urlJoin(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/client-side-access-tokens/${encodeURIComponent(token)}`,
            ),
            method: "DELETE",
            headers: {
                "X-Project":
                    (await core.Supplier.get(this._options.project)) != null
                        ? await core.Supplier.get(this._options.project)
                        : undefined,
                "X-Fern-Language": "JavaScript",
                "X-Fern-SDK-Name": "@letta-ai/letta-client",
                "X-Fern-SDK-Version": "0.1.199",
                "User-Agent": "@letta-ai/letta-client/0.1.199",
                "X-Fern-Runtime": core.RUNTIME.type,
                "X-Fern-Runtime-Version": core.RUNTIME.version,
                ...(await this._getCustomAuthorizationHeaders()),
                ...requestOptions?.headers,
            },
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Letta.BadRequestError(_response.error.body, _response.rawResponse);
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError(
                    "Timeout exceeded when calling DELETE /v1/client-side-access-tokens/{token}.",
                );
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const tokenValue = await core.Supplier.get(this._options.token);
        return { Authorization: `Bearer ${tokenValue}` };
    }
}
