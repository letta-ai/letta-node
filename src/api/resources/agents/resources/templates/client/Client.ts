/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Letta from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Templates {
    export interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Templates {
    protected readonly _options: Templates.Options;

    constructor(_options: Templates.Options = {}) {
        this._options = _options;
    }

    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Creates a new version of the template version of the agent.
     *
     * @param {string} agentId - The agent ID of the agent to migrate, if this agent is not a template, it will create a agent template from the agent provided as well
     * @param {Letta.agents.TemplatesCreateVersionRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.agents.templates.createVersion("agent_id")
     */
    public createVersion(
        agentId: string,
        request: Letta.agents.TemplatesCreateVersionRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__createVersion(agentId, request, requestOptions));
    }

    private async __createVersion(
        agentId: string,
        request: Letta.agents.TemplatesCreateVersionRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { returnAgentState, ..._body } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (returnAgentState != null) {
            _queryParams["returnAgentState"] = returnAgentState;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}/version-template`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: _queryParams,
            requestType: "json",
            body: _body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Letta.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Letta.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError(
                    "Timeout exceeded when calling POST /v1/agents/{agent_id}/version-template.",
                );
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Migrate an agent to a new versioned agent template.
     *
     * @param {string} agentId
     * @param {Letta.agents.TemplatesMigrateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.NotFoundError}
     * @throws {@link Letta.ConflictError}
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.agents.templates.migrate("agent_id", {
     *         to_template: "to_template",
     *         preserve_core_memories: true
     *     })
     */
    public migrate(
        agentId: string,
        request: Letta.agents.TemplatesMigrateRequest,
        requestOptions?: Templates.RequestOptions,
    ): core.HttpResponsePromise<Letta.agents.TemplatesMigrateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__migrate(agentId, request, requestOptions));
    }

    private async __migrate(
        agentId: string,
        request: Letta.agents.TemplatesMigrateRequest,
        requestOptions?: Templates.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.agents.TemplatesMigrateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}/migrate`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Letta.agents.TemplatesMigrateResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 404:
                    throw new Letta.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Letta.ConflictError(
                        _response.error.body as Letta.ConflictErrorBody,
                        _response.rawResponse,
                    );
                case 500:
                    throw new Letta.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling POST /v1/agents/{agent_id}/migrate.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Creates a template from an agent.
     *
     * @param {string} agentId
     * @param {Letta.agents.TemplatesCreateRequest} request
     * @param {Templates.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.InternalServerError}
     *
     * @example
     *     await client.agents.templates.create("agent_id")
     */
    public create(
        agentId: string,
        request: Letta.agents.TemplatesCreateRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): core.HttpResponsePromise<Letta.agents.TemplatesCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__create(agentId, request, requestOptions));
    }

    private async __create(
        agentId: string,
        request: Letta.agents.TemplatesCreateRequest = {},
        requestOptions?: Templates.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.agents.TemplatesCreateResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}/template`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.agents.TemplatesCreateResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 500:
                    throw new Letta.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError(
                    "Timeout exceeded when calling POST /v1/agents/{agent_id}/template.",
                );
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const tokenValue = await core.Supplier.get(this._options.token);
        return { Authorization: `Bearer ${tokenValue}` };
    }
}
