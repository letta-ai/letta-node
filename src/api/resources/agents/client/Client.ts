/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Letta from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import * as fs from "fs";
import { Context } from "../resources/context/client/Client.js";
import { Tools } from "../resources/tools/client/Client.js";
import { Sources } from "../resources/sources/client/Client.js";
import { Folders } from "../resources/folders/client/Client.js";
import { Files } from "../resources/files/client/Client.js";
import { CoreMemory } from "../resources/coreMemory/client/Client.js";
import { Blocks } from "../resources/blocks/client/Client.js";
import { Passages } from "../resources/passages/client/Client.js";
import { Messages } from "../resources/messages/client/Client.js";
import { Groups } from "../resources/groups/client/Client.js";
import { Templates } from "../resources/templates/client/Client.js";
import { MemoryVariables } from "../resources/memoryVariables/client/Client.js";

export declare namespace Agents {
    export interface Options {
        environment?: core.Supplier<environments.LettaEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<string | undefined>;
        /** Override the X-Project header */
        project?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the X-Project header */
        project?: string | undefined;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Agents {
    protected readonly _options: Agents.Options;
    protected _context: Context | undefined;
    protected _tools: Tools | undefined;
    protected _sources: Sources | undefined;
    protected _folders: Folders | undefined;
    protected _files: Files | undefined;
    protected _coreMemory: CoreMemory | undefined;
    protected _blocks: Blocks | undefined;
    protected _passages: Passages | undefined;
    protected _messages: Messages | undefined;
    protected _groups: Groups | undefined;
    protected _templates: Templates | undefined;
    protected _memoryVariables: MemoryVariables | undefined;

    constructor(_options: Agents.Options = {}) {
        this._options = _options;
    }

    public get context(): Context {
        return (this._context ??= new Context(this._options));
    }

    public get tools(): Tools {
        return (this._tools ??= new Tools(this._options));
    }

    public get sources(): Sources {
        return (this._sources ??= new Sources(this._options));
    }

    public get folders(): Folders {
        return (this._folders ??= new Folders(this._options));
    }

    public get files(): Files {
        return (this._files ??= new Files(this._options));
    }

    public get coreMemory(): CoreMemory {
        return (this._coreMemory ??= new CoreMemory(this._options));
    }

    public get blocks(): Blocks {
        return (this._blocks ??= new Blocks(this._options));
    }

    public get passages(): Passages {
        return (this._passages ??= new Passages(this._options));
    }

    public get messages(): Messages {
        return (this._messages ??= new Messages(this._options));
    }

    public get groups(): Groups {
        return (this._groups ??= new Groups(this._options));
    }

    public get templates(): Templates {
        return (this._templates ??= new Templates(this._options));
    }

    public get memoryVariables(): MemoryVariables {
        return (this._memoryVariables ??= new MemoryVariables(this._options));
    }

    /**
     * List all agents associated with a given user.
     *
     * This endpoint retrieves a list of all agents and their configurations
     * associated with the specified user ID.
     *
     * @param {Letta.AgentsListRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.list()
     */
    public list(
        request: Letta.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Letta.AgentState[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(request, requestOptions));
    }

    private async __list(
        request: Letta.AgentsListRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.AgentState[]>> {
        const {
            name,
            tags,
            match_all_tags: matchAllTags,
            before,
            after,
            limit,
            query_text: queryText,
            project_id: projectId,
            template_id: templateId,
            base_template_id: baseTemplateId,
            identity_id: identityId,
            identifier_keys: identifierKeys,
            include_relationships: includeRelationships,
            ascending,
            sort_by: sortBy,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (name != null) {
            _queryParams["name"] = name;
        }

        if (tags != null) {
            if (Array.isArray(tags)) {
                _queryParams["tags"] = tags.map((item) => item);
            } else {
                _queryParams["tags"] = tags;
            }
        }

        if (matchAllTags != null) {
            _queryParams["match_all_tags"] = matchAllTags.toString();
        }

        if (before != null) {
            _queryParams["before"] = before;
        }

        if (after != null) {
            _queryParams["after"] = after;
        }

        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (queryText != null) {
            _queryParams["query_text"] = queryText;
        }

        if (projectId != null) {
            _queryParams["project_id"] = projectId;
        }

        if (templateId != null) {
            _queryParams["template_id"] = templateId;
        }

        if (baseTemplateId != null) {
            _queryParams["base_template_id"] = baseTemplateId;
        }

        if (identityId != null) {
            _queryParams["identity_id"] = identityId;
        }

        if (identifierKeys != null) {
            if (Array.isArray(identifierKeys)) {
                _queryParams["identifier_keys"] = identifierKeys.map((item) => item);
            } else {
                _queryParams["identifier_keys"] = identifierKeys;
            }
        }

        if (includeRelationships != null) {
            if (Array.isArray(includeRelationships)) {
                _queryParams["include_relationships"] = includeRelationships.map((item) => item);
            } else {
                _queryParams["include_relationships"] = includeRelationships;
            }
        }

        if (ascending != null) {
            _queryParams["ascending"] = ascending.toString();
        }

        if (sortBy != null) {
            _queryParams["sort_by"] = sortBy;
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/agents/",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.AgentState[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling GET /v1/agents/.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a new agent with the specified configuration.
     *
     * @param {Letta.CreateAgentRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.create()
     */
    public create(
        request: Letta.CreateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Letta.AgentState> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Letta.CreateAgentRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.AgentState>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/agents/",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.AgentState, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling POST /v1/agents/.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get the count of all agents associated with a given user.
     *
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.count()
     */
    public count(requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<number> {
        return core.HttpResponsePromise.fromPromise(this.__count(requestOptions));
    }

    private async __count(requestOptions?: Agents.RequestOptions): Promise<core.WithRawResponse<number>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/agents/count",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as number, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling GET /v1/agents/count.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Export the serialized JSON representation of an agent, formatted with indentation.
     *
     * @param {string} agentId
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.exportFile("agent_id")
     */
    public exportFile(agentId: string, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<string> {
        return core.HttpResponsePromise.fromPromise(this.__exportFile(agentId, requestOptions));
    }

    private async __exportFile(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<string>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}/export`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as string, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling GET /v1/agents/{agent_id}/export.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Import a serialized agent file and recreate the agent in the system.
     *
     * @param {Letta.BodyImportAgentSerialized} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.importFile({
     *         file: fs.createReadStream("/path/to/your/file")
     *     })
     */
    public importFile(
        request: Letta.BodyImportAgentSerialized,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Letta.AgentState> {
        return core.HttpResponsePromise.fromPromise(this.__importFile(request, requestOptions));
    }

    private async __importFile(
        request: Letta.BodyImportAgentSerialized,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.AgentState>> {
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (request.append_copy_suffix != null) {
            _queryParams["append_copy_suffix"] = request.append_copy_suffix.toString();
        }

        if (request.override_existing_tools != null) {
            _queryParams["override_existing_tools"] = request.override_existing_tools.toString();
        }

        if (request.project_id != null) {
            _queryParams["project_id"] = request.project_id;
        }

        if (request.strip_messages != null) {
            _queryParams["strip_messages"] = request.strip_messages.toString();
        }

        const _request = await core.newFormData();
        await _request.appendFile("file", request.file);
        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/agents/import",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                    ..._maybeEncodedRequest.headers,
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.AgentState, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling POST /v1/agents/import.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get the state of the agent.
     *
     * @param {string} agentId
     * @param {Letta.AgentsRetrieveRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.retrieve("agent_id")
     */
    public retrieve(
        agentId: string,
        request: Letta.AgentsRetrieveRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Letta.AgentState> {
        return core.HttpResponsePromise.fromPromise(this.__retrieve(agentId, request, requestOptions));
    }

    private async __retrieve(
        agentId: string,
        request: Letta.AgentsRetrieveRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.AgentState>> {
        const { include_relationships: includeRelationships } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (includeRelationships != null) {
            if (Array.isArray(includeRelationships)) {
                _queryParams["include_relationships"] = includeRelationships.map((item) => item);
            } else {
                _queryParams["include_relationships"] = includeRelationships;
            }
        }

        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.AgentState, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling GET /v1/agents/{agent_id}.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete an agent.
     *
     * @param {string} agentId
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.delete("agent_id")
     */
    public delete(agentId: string, requestOptions?: Agents.RequestOptions): core.HttpResponsePromise<unknown> {
        return core.HttpResponsePromise.fromPromise(this.__delete(agentId, requestOptions));
    }

    private async __delete(
        agentId: string,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<unknown>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling DELETE /v1/agents/{agent_id}.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update an existing agent
     *
     * @param {string} agentId
     * @param {Letta.UpdateAgent} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.modify("agent_id")
     */
    public modify(
        agentId: string,
        request: Letta.UpdateAgent = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Letta.AgentState> {
        return core.HttpResponsePromise.fromPromise(this.__modify(agentId, request, requestOptions));
    }

    private async __modify(
        agentId: string,
        request: Letta.UpdateAgent = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.AgentState>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.AgentState, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling PATCH /v1/agents/{agent_id}.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Summarize an agent's conversation history to a target message length.
     *
     * This endpoint summarizes the current message history for a given agent,
     * truncating and compressing it down to the specified `max_message_length`.
     *
     * @param {string} agentId
     * @param {Letta.SummarizeAgentConversationRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Letta.UnprocessableEntityError}
     *
     * @example
     *     await client.agents.summarizeAgentConversation("agent_id", {
     *         max_message_length: 1
     *     })
     */
    public summarizeAgentConversation(
        agentId: string,
        request: Letta.SummarizeAgentConversationRequest,
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(
            this.__summarizeAgentConversation(agentId, request, requestOptions),
        );
    }

    private async __summarizeAgentConversation(
        agentId: string,
        request: Letta.SummarizeAgentConversationRequest,
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const { max_message_length: maxMessageLength } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        _queryParams["max_message_length"] = maxMessageLength.toString();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                `v1/agents/${encodeURIComponent(agentId)}/summarize`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 422:
                    throw new Letta.UnprocessableEntityError(
                        _response.error.body as Letta.HttpValidationError,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.LettaError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError(
                    "Timeout exceeded when calling POST /v1/agents/{agent_id}/summarize.",
                );
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * <Note>This endpoint is only available on Letta Cloud.</Note>
     *
     * Search deployed agents.
     *
     * @param {Letta.AgentsSearchRequest} request
     * @param {Agents.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.agents.search()
     */
    public search(
        request: Letta.AgentsSearchRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): core.HttpResponsePromise<Letta.AgentsSearchResponse> {
        return core.HttpResponsePromise.fromPromise(this.__search(request, requestOptions));
    }

    private async __search(
        request: Letta.AgentsSearchRequest = {},
        requestOptions?: Agents.RequestOptions,
    ): Promise<core.WithRawResponse<Letta.AgentsSearchResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.LettaEnvironment.LettaCloud,
                "v1/agents/search",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    "X-Project": requestOptions?.project,
                    ...(await this._getCustomAuthorizationHeaders()),
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Letta.AgentsSearchResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            throw new errors.LettaError({
                statusCode: _response.error.statusCode,
                body: _response.error.body,
                rawResponse: _response.rawResponse,
            });
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.LettaError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.LettaTimeoutError("Timeout exceeded when calling POST /v1/agents/search.");
            case "unknown":
                throw new errors.LettaError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const tokenValue = await core.Supplier.get(this._options.token);
        return { Authorization: `Bearer ${tokenValue}` };
    }
}
