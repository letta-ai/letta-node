/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Letta from "../../../../index.js";

/**
 * @example
 *     {}
 */
export interface UpdateAgent {
    /** The name of the agent. */
    name?: string;
    /** The ids of the tools used by the agent. */
    tool_ids?: string[];
    /** The ids of the sources used by the agent. */
    source_ids?: string[];
    /** The ids of the blocks used by the agent. */
    block_ids?: string[];
    /** The tags associated with the agent. */
    tags?: string[];
    /** The system prompt used by the agent. */
    system?: string;
    /** The tool rules governing the agent. */
    tool_rules?: UpdateAgent.ToolRules.Item[];
    /** The LLM configuration used by the agent. */
    llm_config?: Letta.LlmConfig;
    /** The embedding configuration used by the agent. */
    embedding_config?: Letta.EmbeddingConfig;
    /** The ids of the messages in the agent's in-context memory. */
    message_ids?: string[];
    /** The description of the agent. */
    description?: string;
    /** The metadata of the agent. */
    metadata?: Record<string, unknown>;
    /** The environment variables for tool execution specific to this agent. */
    tool_exec_environment_variables?: Record<string, string | undefined>;
    /** The id of the project the agent belongs to. */
    project_id?: string;
    /** The id of the template the agent belongs to. */
    template_id?: string;
    /** The base template id of the agent. */
    base_template_id?: string;
    /** The ids of the identities associated with this agent. */
    identity_ids?: string[];
    /** If set to True, the agent will not remember previous messages (though the agent will still retain state via core memory blocks and archival/recall memory). Not recommended unless you have an advanced use case. */
    message_buffer_autoclear?: boolean;
    /** The LLM configuration handle used by the agent, specified in the format provider/model-name, as an alternative to specifying llm_config. */
    model?: string;
    /** The embedding configuration handle used by the agent, specified in the format provider/model-name. */
    embedding?: string;
    /** If set to True, memory management will move to a background agent thread. */
    enable_sleeptime?: boolean;
    /** The response format for the agent. */
    response_format?: UpdateAgent.ResponseFormat;
    /** The timestamp when the agent last completed a run. */
    last_run_completion?: string;
    /** The duration in milliseconds of the agent's last run. */
    last_run_duration_ms?: number;
    /** The timezone of the agent (IANA format). */
    timezone?: string;
    /** Maximum number of files that can be open at once for this agent. Setting this too high may exceed the context window, which will break the agent. */
    max_files_open?: number;
    /** The per-file view window character limit for this agent. Setting this too high may exceed the context window, which will break the agent. */
    per_file_view_window_char_limit?: number;
}

export namespace UpdateAgent {
    export type ToolRules = ToolRules.Item[];

    export namespace ToolRules {
        export type Item =
            | Letta.ConditionalToolRule
            | Letta.ChildToolRule
            | Letta.ContinueToolRule
            | Letta.TerminalToolRule
            | Letta.MaxCountPerStepToolRule
            | Letta.ParentToolRule
            | Letta.RequiredBeforeExitToolRule
            | Letta.InitToolRule;
    }

    export type ResponseFormat =
        | Letta.JsonObjectResponseFormat
        | Letta.JsonSchemaResponseFormat
        | Letta.TextResponseFormat;
}
